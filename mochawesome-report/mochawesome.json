{
  "stats": {
    "suites": 7,
    "tests": 42,
    "passes": 42,
    "pending": 0,
    "failures": 0,
    "start": "2021-06-27T11:52:12.573Z",
    "end": "2021-06-27T11:52:14.837Z",
    "duration": 2264,
    "testsRegistered": 42,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a738c815-a99e-4723-85c8-5c3d51dedcf2",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "55ea3c9c-0a73-491b-b9de-f68c35c4a92d",
          "title": "Color Test",
          "fullFile": "/home/runner/work/yeelight/yeelight/test/color.test.ts",
          "file": "/test/color.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "new Color(\"string\") should conver hex string to color object",
              "fullTitle": "Color Test new Color(\"string\") should conver hex string to color object",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var color = new color_1.Color(0, 0, 0, \"FFFFFF\");\nchai_1.expect(__assign({}, color)).deep.eq({\n    blue: 255,\n    color: \"FFFFFF\",\n    green: 255,\n    red: 255,\n});",
              "err": {},
              "uuid": "e1f7ff45-f85f-48c6-8a62-9f46d3f3ff05",
              "parentUUID": "55ea3c9c-0a73-491b-b9de-f68c35c4a92d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "new Color(123, 44, 55) should give the color number : 0x7B2C37",
              "fullTitle": "Color Test new Color(123, 44, 55) should give the color number : 0x7B2C37",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var color = new color_1.Color(123, 44, 55);\nvar numberValue = color.getValue();\nchai_1.expect(numberValue).deep.eq(0x7B2C37);",
              "err": {},
              "uuid": "e269f575-1b68-4f52-9ad9-e6e7893680a2",
              "parentUUID": "55ea3c9c-0a73-491b-b9de-f68c35c4a92d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "new Color(255, 255, 255) should give the color number : 0xFFFFFF",
              "fullTitle": "Color Test new Color(255, 255, 255) should give the color number : 0xFFFFFF",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var color = new color_1.Color(255, 255, 255);\nvar numberValue = color.getValue();\nchai_1.expect(numberValue).deep.eq(0xFFFFFF);",
              "err": {},
              "uuid": "5b11f8f2-d3bd-4c9a-93db-f48137dda850",
              "parentUUID": "55ea3c9c-0a73-491b-b9de-f68c35c4a92d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "new Color(0, 0, 0, \"1ac3ef\") should give the color number : 1754095",
              "fullTitle": "Color Test new Color(0, 0, 0, \"1ac3ef\") should give the color number : 1754095",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var color = new color_1.Color(0, 0, 0, \"1ac3ef\");\nchai_1.expect(__assign({}, color)).deep.eq({\n    blue: 239,\n    color: \"1AC3EF\",\n    green: 195,\n    red: 26,\n});",
              "err": {},
              "uuid": "eb77755d-38df-46c7-ad1b-573e6c89526f",
              "parentUUID": "55ea3c9c-0a73-491b-b9de-f68c35c4a92d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e1f7ff45-f85f-48c6-8a62-9f46d3f3ff05",
            "e269f575-1b68-4f52-9ad9-e6e7893680a2",
            "5b11f8f2-d3bd-4c9a-93db-f48137dda850",
            "eb77755d-38df-46c7-ad1b-573e6c89526f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "d2ddb8aa-9d03-4190-bfaa-c92336ca2f78",
          "title": "Discover Class Test",
          "fullFile": "/home/runner/work/yeelight/yeelight/test/discover.test.ts",
          "file": "/test/discover.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Discover Class Test\"",
              "fullTitle": "Discover Class Test \"before each\" hook in \"Discover Class Test\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var me = TestUtils;\nserver = net_1.createServer(function (s) {\n    socket = s;\n    socket.on(\"data\", function (incomming) {\n        validateFunc(JSON.parse(incomming.toString()));\n        if (data) {\n            socket.write(JSON.stringify(data));\n        }\n    });\n    // socket.pipe(socket);\n});\nserver.on(\"connection\", function (s) { return socket = s; });\n// console.log(\"this.port\", me.port);\nserver.listen(me.port, \"127.0.0.1\", done);\n//done();",
              "err": {},
              "uuid": "13972ccb-6a41-420b-b24e-bc08176e63ae",
              "parentUUID": "d2ddb8aa-9d03-4190-bfaa-c92336ca2f78",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Discover Class Test\"",
              "fullTitle": "Discover Class Test \"after each\" hook in \"Discover Class Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// TestUtils.port++;\nif (socket) {\n    socket.removeAllListeners();\n    socket.end();\n    socket.destroy();\n}\nif (server) {\n    server.removeAllListeners();\n    server.close(done);\n}\nelse {\n    done();\n}",
              "err": {},
              "uuid": "3de6963b-24ee-45c2-931c-032a40a6e842",
              "parentUUID": "d2ddb8aa-9d03-4190-bfaa-c92336ca2f78",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "discover() should find bulbs",
              "fullTitle": "Discover Class Test discover() should find bulbs",
              "timedOut": false,
              "duration": 203,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var discover, devices;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    discover = new discover_1.Discover({\n                        limit: 1,\n                        timeout: 1000,\n                    });\n                    setTimeout(function () {\n                        // Mock message received:\n                        var message = \"HTTP/1.1 200 OK\\r\\n\\\nCache-Control: max-age=3584\\r\\n\\\nDate:\\r\\n\\\nExt:\\r\\n\\\nLocation: yeelight://192.168.0.42:55443\\r\\n\\\nServer: POSIX UPnP/1.0 YGLC/1\\r\\n\\\nid: 0x000000000af2608f\\r\\n\\\nmodel: color\\r\\n\\\nfw_ver: 26\\r\\n\\\nsupport: get_prop set_default set_power toggle set_bright start_cf \\r\\n\\\nstop_cf set_scene cron_add cron_get cron_del set_ct_abx set_rgb set_hsv \\r\\n\\\nset_adjust adjust_bright adjust_ct adjust_color set_music set\\r\\n\\\npower: on\\r\\n\\\nbright: 1\\r\\n\\\ncolor_mode: 1\\r\\n\\\nct: 2234\\r\\n\\\nrgb: 65280\\r\\n\\\nhue: 240\\r\\n\\\nsat: 100\\r\\n\\\nname: new_name\";\n                        // @ts-ignore private\n                        discover.onSocketMessage(Buffer.from(message), {\n                            address: \"192.168.0.42\",\n                            family: \"IPv4\",\n                            port: 49155,\n                            // size: message.length\n                        });\n                    }, 100);\n                    return [4 /*yield*/, discover.start()];\n                case 1:\n                    devices = _a.sent();\n                    chai_1.expect(devices.length).to.eq(1);\n                    chai_1.expect(devices[0].id).to.eq(\"0x000000000af2608f\");\n                    chai_1.expect(devices[0].host).to.eq(\"192.168.0.42\");\n                    chai_1.expect(devices[0].port).to.eq(55443);\n                    discover.destroy();\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "3a2cfe5d-d74b-4a9e-83a9-ba036f8647ce",
              "parentUUID": "d2ddb8aa-9d03-4190-bfaa-c92336ca2f78",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3a2cfe5d-d74b-4a9e-83a9-ba036f8647ce"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 203,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "60303b5f-eaf8-473d-b37c-9d7e2f2ca05a",
          "title": "Util Test",
          "fullFile": "/home/runner/work/yeelight/yeelight/test/util.test.ts",
          "file": "/test/util.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "parseDeviceInfo() should successful parse valid message",
              "fullTitle": "Util Test parseDeviceInfo() should successful parse valid message",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var message = fs.readFileSync(path.join(__dirname, \"./data/valid-message.txt\"), \"utf8\");\nvar device = utils_1.Utils.parseDeviceInfo(message);\nvar outputExpected = require(\"./data/valid-device.json\");\nchai_1.expect(device).not.eq(null);\nchai_1.expect(device).deep.eq(outputExpected);",
              "err": {},
              "uuid": "b9eafe71-e8d9-41c0-b12d-822fb09cbc56",
              "parentUUID": "60303b5f-eaf8-473d-b37c-9d7e2f2ca05a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getListIpAddress should get the arround ip address first",
              "fullTitle": "Util Test getListIpAddress should get the arround ip address first",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var ip = \"192.168.1.5\";\nvar output = utils_1.Utils.getListIpAddress(ip, 1, 10);\nchai_1.expect(output).to.deep.eq([\n    \"192.168.1.4\",\n    \"192.168.1.6\",\n    \"192.168.1.3\",\n    \"192.168.1.7\",\n    \"192.168.1.2\",\n    \"192.168.1.8\",\n    \"192.168.1.1\",\n    \"192.168.1.9\",\n    \"192.168.1.10\",\n]);",
              "err": {},
              "uuid": "4d0a0fc3-3361-4d14-a451-3b5f52406efa",
              "parentUUID": "60303b5f-eaf8-473d-b37c-9d7e2f2ca05a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "980b5b12-93d4-4b28-b27b-c3c1820a0dd1",
              "title": "hexToNumber() test",
              "fullFile": "/home/runner/work/yeelight/yeelight/test/util.test.ts",
              "file": "/test/util.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "numberToHex(1) should equal to 1",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(1) should equal to 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "27c298a2-ba08-4801-8b2c-1571f7b0c8c3",
                  "parentUUID": "980b5b12-93d4-4b28-b27b-c3c1820a0dd1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(10) should equal to 16",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(10) should equal to 16",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "9198e59a-e4db-49c8-9c51-eb93d0bf9adf",
                  "parentUUID": "980b5b12-93d4-4b28-b27b-c3c1820a0dd1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(14) should equal to 20",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(14) should equal to 20",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "66bb026c-0892-44a7-9081-9ca44c445eda",
                  "parentUUID": "980b5b12-93d4-4b28-b27b-c3c1820a0dd1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(44) should equal to 68",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(44) should equal to 68",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "8deb5134-9283-4257-83e7-c322396c8332",
                  "parentUUID": "980b5b12-93d4-4b28-b27b-c3c1820a0dd1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(A) should equal to 10",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(A) should equal to 10",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "00a0ddd1-a0b6-45d1-b58b-4a4c10371eee",
                  "parentUUID": "980b5b12-93d4-4b28-b27b-c3c1820a0dd1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(F) should equal to 15",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(F) should equal to 15",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "46424c72-d3b6-4ff6-9f23-09138c0c1d35",
                  "parentUUID": "980b5b12-93d4-4b28-b27b-c3c1820a0dd1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(1A) should equal to 26",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(1A) should equal to 26",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "68f48116-3ef0-49a8-9096-3795cf0f19e5",
                  "parentUUID": "980b5b12-93d4-4b28-b27b-c3c1820a0dd1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(FF) should equal to 255",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(FF) should equal to 255",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "6cd6973c-e0e6-47f0-a736-32c2bcaab68b",
                  "parentUUID": "980b5b12-93d4-4b28-b27b-c3c1820a0dd1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(AB) should equal to 171",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(AB) should equal to 171",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "f753d35f-4bf4-4632-b9a4-64a6a368fcf1",
                  "parentUUID": "980b5b12-93d4-4b28-b27b-c3c1820a0dd1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(A123BE) should equal to 10560446",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(A123BE) should equal to 10560446",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "fb4d28ca-66e9-4f3d-83f0-3a2a6ce8ee9e",
                  "parentUUID": "980b5b12-93d4-4b28-b27b-c3c1820a0dd1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(1234567890ABCDEF) should equal to 1311768467294899700",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(1234567890ABCDEF) should equal to 1311768467294899700",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "556e33c1-233b-4051-957b-bd8a553c2327",
                  "parentUUID": "980b5b12-93d4-4b28-b27b-c3c1820a0dd1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(ABCFED) should equal to 11259885",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(ABCFED) should equal to 11259885",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "ed19ad59-c3c1-488c-bb1e-429d7960fe11",
                  "parentUUID": "980b5b12-93d4-4b28-b27b-c3c1820a0dd1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(abccde) should equal to 11259102",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(abccde) should equal to 11259102",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "edfedd05-f9f2-48d6-8566-9503ed4335fc",
                  "parentUUID": "980b5b12-93d4-4b28-b27b-c3c1820a0dd1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "27c298a2-ba08-4801-8b2c-1571f7b0c8c3",
                "9198e59a-e4db-49c8-9c51-eb93d0bf9adf",
                "66bb026c-0892-44a7-9081-9ca44c445eda",
                "8deb5134-9283-4257-83e7-c322396c8332",
                "00a0ddd1-a0b6-45d1-b58b-4a4c10371eee",
                "46424c72-d3b6-4ff6-9f23-09138c0c1d35",
                "68f48116-3ef0-49a8-9096-3795cf0f19e5",
                "6cd6973c-e0e6-47f0-a736-32c2bcaab68b",
                "f753d35f-4bf4-4632-b9a4-64a6a368fcf1",
                "fb4d28ca-66e9-4f3d-83f0-3a2a6ce8ee9e",
                "556e33c1-233b-4051-957b-bd8a553c2327",
                "ed19ad59-c3c1-488c-bb1e-429d7960fe11",
                "edfedd05-f9f2-48d6-8566-9503ed4335fc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [
            "b9eafe71-e8d9-41c0-b12d-822fb09cbc56",
            "4d0a0fc3-3361-4d14-a451-3b5f52406efa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "eea74fad-89ea-48f1-ac86-05f65437d1e0",
          "title": "Yeelight Class Test",
          "fullFile": "/home/runner/work/yeelight/yeelight/test/yeelight.test.ts",
          "file": "/test/yeelight.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Yeelight Class Test\"",
              "fullTitle": "Yeelight Class Test \"before each\" hook in \"Yeelight Class Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var me = TestUtils;\nserver = net_1.createServer(function (s) {\n    socket = s;\n    socket.on(\"data\", function (incomming) {\n        validateFunc(JSON.parse(incomming.toString()));\n        if (data) {\n            socket.write(JSON.stringify(data));\n        }\n    });\n    // socket.pipe(socket);\n});\nserver.on(\"connection\", function (s) { return socket = s; });\n// console.log(\"this.port\", me.port);\nserver.listen(me.port, \"127.0.0.1\", done);\n//done();",
              "err": {},
              "uuid": "e9d868c9-aa54-41b4-a7ba-040aee8b4054",
              "parentUUID": "eea74fad-89ea-48f1-ac86-05f65437d1e0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Yeelight Class Test\"",
              "fullTitle": "Yeelight Class Test \"after each\" hook in \"Yeelight Class Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// TestUtils.port++;\nif (socket) {\n    socket.removeAllListeners();\n    socket.end();\n    socket.destroy();\n}\nif (server) {\n    server.removeAllListeners();\n    server.close(done);\n}\nelse {\n    done();\n}",
              "err": {},
              "uuid": "5690294f-1533-408e-b2bf-321235378362",
              "parentUUID": "eea74fad-89ea-48f1-ac86-05f65437d1e0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "connect() should success",
              "fullTitle": "Yeelight Class Test connect() should success",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var yeelight, y;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    yeelight = new yeelight_1.Yeelight(options);\n                    return [4 /*yield*/, yeelight.connect()];\n                case 1:\n                    y = _a.sent();\n                    chai_1.expect(y).not.eq(null);\n                    chai_1.expect(y.connected).to.eq(true);\n                    y.disconnect();\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "22ede249-587a-4691-9822-3a59f8833004",
              "parentUUID": "eea74fad-89ea-48f1-ac86-05f65437d1e0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "0612fadd-4ef2-4d7c-8ca7-2d34fd78743c",
              "title": "setName() tests",
              "fullFile": "/home/runner/work/yeelight/yeelight/test/yeelight.test.ts",
              "file": "/test/yeelight.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setName() should work when send valid message",
                  "fullTitle": "Yeelight Class Test setName() tests setName() should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options.lightPort = test_util_1.TestUtils.port;\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        test_util_1.TestUtils.mockSocket({ id: 1, result: [\"ok\"] }, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"unit_test\"],\n                            });\n                        });\n                        return [4 /*yield*/, y.setName(\"unit_test\")];\n                    case 2:\n                        result = _a.sent();\n                        chai_1.expect(result).to.not.eq(null);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                  "err": {},
                  "uuid": "fc801cea-dd31-4bb4-9aef-1290f44a176a",
                  "parentUUID": "0612fadd-4ef2-4d7c-8ca7-2d34fd78743c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setName() should fire commandSuccess, set_name, set_name_sent event",
                  "fullTitle": "Yeelight Class Test setName() tests setName() should fire commandSuccess, set_name, set_name_sent event",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, expectData, spy1, spy2, spy3, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        options.lightPort = test_util_1.TestUtils.port;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        expectData = {\n                            action: \"set_name\",\n                            command: new models_1.Command(1, models_1.CommandType.SET_NAME, [\"unit_test\"]),\n                            result: { id: 1, result: [\"ok\"] },\n                            success: true,\n                        };\n                        spy1 = sinon_1.spy();\n                        spy2 = sinon_1.spy();\n                        spy3 = sinon_1.spy();\n                        y.once(\"set_name\", spy1);\n                        y.once(\"commandSuccess\", spy2);\n                        y.once(\"set_name_sent\", spy3);\n                        test_util_1.TestUtils.mockSocket({ id: 1, result: [\"ok\"] }, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"unit_test\"],\n                            });\n                        });\n                        return [4 /*yield*/, y.setName(\"unit_test\")];\n                    case 2:\n                        result = _a.sent();\n                        chai_1.expect(__assign({}, result)).to.deep.equal(expectData);\n                        sinon_1.assert.calledWith(spy1, expectData);\n                        sinon_1.assert.calledWith(spy2, expectData);\n                        sinon_1.assert.calledWith(spy3, expectData.command);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                  "err": {},
                  "uuid": "766f7088-688e-4f5e-9f48-b9171ff2b0b0",
                  "parentUUID": "0612fadd-4ef2-4d7c-8ca7-2d34fd78743c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setName() should fire error when send invalid name, should fire set_name, commandError, set_name_sent events",
                  "fullTitle": "Yeelight Class Test setName() tests setName() should fire error when send invalid name, should fire set_name, commandError, set_name_sent events",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, expectData1, spy1, spy2, spy3, result, errResult, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        options.lightPort = test_util_1.TestUtils.port;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        expectData1 = {\n                            action: \"set_name\",\n                            command: new models_1.Command(1, models_1.CommandType.SET_NAME, [\"this is invalid name\"]),\n                            result: { id: 1, error: { code: -1, message: \"General error\" } },\n                            success: false,\n                        };\n                        spy1 = sinon_1.spy();\n                        spy2 = sinon_1.spy();\n                        spy3 = sinon_1.spy();\n                        y.once(\"set_name\", spy1);\n                        y.once(\"commandError\", spy2);\n                        y.once(\"set_name_sent\", spy3);\n                        test_util_1.TestUtils.mockSocket({ id: 1, error: { code: -1, message: \"General error\" } }, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"this is invalid name\"],\n                            });\n                        });\n                        result = null;\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, y.setName(\"this is invalid name\")];\n                    case 3:\n                        result = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_1 = _a.sent();\n                        errResult = error_1;\n                        return [3 /*break*/, 5];\n                    case 5:\n                        chai_1.expect(result).to.be.equal(null);\n                        chai_1.expect(__assign({}, errResult)).to.deep.equal(expectData1);\n                        sinon_1.assert.calledWith(spy1, expectData1);\n                        sinon_1.assert.calledWith(spy2, expectData1);\n                        sinon_1.assert.calledWith(spy3, expectData1.command);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                  "err": {},
                  "uuid": "14d8d18b-03e0-4d92-b7ab-4922dc2970f3",
                  "parentUUID": "0612fadd-4ef2-4d7c-8ca7-2d34fd78743c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setName() should reject promise, raise commandTimedout event when socket not response",
                  "fullTitle": "Yeelight Class Test setName() tests setName() should reject promise, raise commandTimedout event when socket not response",
                  "timedOut": false,
                  "duration": 2001,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, expectData, spy2, spy3, result, err_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        options.lightPort = test_util_1.TestUtils.port;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        expectData = {\n                            action: \"set_name\",\n                            command: new models_1.Command(1, models_1.CommandType.SET_NAME, [\"mybulb\"]),\n                            success: false,\n                        };\n                        spy2 = sinon_1.spy();\n                        spy3 = sinon_1.spy();\n                        y.once(\"commandTimedout\", spy2);\n                        y.once(\"set_name_sent\", spy3);\n                        test_util_1.TestUtils.mockSocket(null, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"mybulb\"],\n                            });\n                        });\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, y.setName(\"mybulb\")];\n                    case 3:\n                        result = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_1 = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 5:\n                        sinon_1.assert.calledWith(spy2, expectData.command);\n                        sinon_1.assert.calledWith(spy3, expectData.command);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                  "err": {},
                  "uuid": "d5f364c2-8b3f-4f67-a91b-fd79edfce579",
                  "parentUUID": "0612fadd-4ef2-4d7c-8ca7-2d34fd78743c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fc801cea-dd31-4bb4-9aef-1290f44a176a",
                "766f7088-688e-4f5e-9f48-b9171ff2b0b0",
                "14d8d18b-03e0-4d92-b7ab-4922dc2970f3",
                "d5f364c2-8b3f-4f67-a91b-fd79edfce579"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2007,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "c3914299-e757-481d-b388-d103e43f6aae",
              "title": "manipulator methods",
              "fullFile": "/home/runner/work/yeelight/yeelight/test/yeelight.test.ts",
              "file": "/test/yeelight.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "method toggle should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method toggle should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "d764a549-5491-4d34-8d03-03c4215a1929",
                  "parentUUID": "c3914299-e757-481d-b388-d103e43f6aae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method cronAdd should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method cronAdd should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "d8fabcde-31d1-45d8-a4b4-f6fa46bd1533",
                  "parentUUID": "c3914299-e757-481d-b388-d103e43f6aae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method cronGet should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method cronGet should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "6bd0305a-25f1-4878-b164-a946a4ea4260",
                  "parentUUID": "c3914299-e757-481d-b388-d103e43f6aae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method cronDelete should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method cronDelete should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "08b7422a-129e-4f9d-b56a-9d1bf6e9d94a",
                  "parentUUID": "c3914299-e757-481d-b388-d103e43f6aae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setDefault should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setDefault should work when send valid message",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "7d58daaf-bfd3-47cc-9d24-219c2307916b",
                  "parentUUID": "c3914299-e757-481d-b388-d103e43f6aae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method startColorFlow should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method startColorFlow should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "d7cb36f8-03b3-4894-b0bd-076c98d70497",
                  "parentUUID": "c3914299-e757-481d-b388-d103e43f6aae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method stopColorFlow should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method stopColorFlow should work when send valid message",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "fb179c71-a957-4c3f-afe2-2e99bfef0428",
                  "parentUUID": "c3914299-e757-481d-b388-d103e43f6aae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method getProperty should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method getProperty should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "b27ff055-f547-422f-a912-beedb90ce39c",
                  "parentUUID": "c3914299-e757-481d-b388-d103e43f6aae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setCtAbx should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setCtAbx should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "bb0fa634-b31c-4c9e-bd6b-2aa2cbaf3a76",
                  "parentUUID": "c3914299-e757-481d-b388-d103e43f6aae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setRGB should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setRGB should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "06662c58-33d6-45c5-81a0-40192d18e9e5",
                  "parentUUID": "c3914299-e757-481d-b388-d103e43f6aae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setHSV should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setHSV should work when send valid message",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "344278f6-a354-4945-a7d8-7f297a581915",
                  "parentUUID": "c3914299-e757-481d-b388-d103e43f6aae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setBright should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setBright should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "f45d7d51-ae5c-4b80-9ba4-9c994ec0a6c6",
                  "parentUUID": "c3914299-e757-481d-b388-d103e43f6aae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setAdjust should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setAdjust should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "8d335117-2b78-4c0a-ad51-00e22063e3b4",
                  "parentUUID": "c3914299-e757-481d-b388-d103e43f6aae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setName should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setName should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "a0b14c96-7edd-44b2-8c1b-f34dcb2ae354",
                  "parentUUID": "c3914299-e757-481d-b388-d103e43f6aae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method adjust should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method adjust should work when send valid message",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "acde7085-6db4-4a4c-a3b5-d5df5f55b1dc",
                  "parentUUID": "c3914299-e757-481d-b388-d103e43f6aae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method ping should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method ping should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "c5c10994-ec69-4f6f-81db-5d67cda60de8",
                  "parentUUID": "c3914299-e757-481d-b388-d103e43f6aae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setScene should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setScene should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "de8e9e64-507b-4cae-845d-0374e8c58123",
                  "parentUUID": "c3914299-e757-481d-b388-d103e43f6aae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d764a549-5491-4d34-8d03-03c4215a1929",
                "d8fabcde-31d1-45d8-a4b4-f6fa46bd1533",
                "6bd0305a-25f1-4878-b164-a946a4ea4260",
                "08b7422a-129e-4f9d-b56a-9d1bf6e9d94a",
                "7d58daaf-bfd3-47cc-9d24-219c2307916b",
                "d7cb36f8-03b3-4894-b0bd-076c98d70497",
                "fb179c71-a957-4c3f-afe2-2e99bfef0428",
                "b27ff055-f547-422f-a912-beedb90ce39c",
                "bb0fa634-b31c-4c9e-bd6b-2aa2cbaf3a76",
                "06662c58-33d6-45c5-81a0-40192d18e9e5",
                "344278f6-a354-4945-a7d8-7f297a581915",
                "f45d7d51-ae5c-4b80-9ba4-9c994ec0a6c6",
                "8d335117-2b78-4c0a-ad51-00e22063e3b4",
                "a0b14c96-7edd-44b2-8c1b-f34dcb2ae354",
                "acde7085-6db4-4a4c-a3b5-d5df5f55b1dc",
                "c5c10994-ec69-4f6f-81db-5d67cda60de8",
                "de8e9e64-507b-4cae-845d-0374e8c58123"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [
            "22ede249-587a-4691-9822-3a59f8833004"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}