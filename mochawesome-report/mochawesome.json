{
  "stats": {
    "suites": 7,
    "tests": 42,
    "passes": 42,
    "pending": 0,
    "failures": 0,
    "start": "2021-06-27T11:26:20.643Z",
    "end": "2021-06-27T11:26:22.930Z",
    "duration": 2287,
    "testsRegistered": 42,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a3c4d4d9-3baf-4a68-94e7-8e9e95361a56",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "130faea3-11ad-417f-a654-763d49c44dda",
          "title": "Color Test",
          "fullFile": "/home/runner/work/yeelight/yeelight/test/color.test.ts",
          "file": "/test/color.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "new Color(\"string\") should conver hex string to color object",
              "fullTitle": "Color Test new Color(\"string\") should conver hex string to color object",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var color = new color_1.Color(0, 0, 0, \"FFFFFF\");\nchai_1.expect(__assign({}, color)).deep.eq({\n    blue: 255,\n    color: \"FFFFFF\",\n    green: 255,\n    red: 255,\n});",
              "err": {},
              "uuid": "aa165300-5c5d-4279-8ef0-6a6bc0b31652",
              "parentUUID": "130faea3-11ad-417f-a654-763d49c44dda",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "new Color(123, 44, 55) should give the color number : 0x7B2C37",
              "fullTitle": "Color Test new Color(123, 44, 55) should give the color number : 0x7B2C37",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var color = new color_1.Color(123, 44, 55);\nvar numberValue = color.getValue();\nchai_1.expect(numberValue).deep.eq(0x7B2C37);",
              "err": {},
              "uuid": "77724e39-29da-4fc9-b25f-4e7cfb16ea4c",
              "parentUUID": "130faea3-11ad-417f-a654-763d49c44dda",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "new Color(255, 255, 255) should give the color number : 0xFFFFFF",
              "fullTitle": "Color Test new Color(255, 255, 255) should give the color number : 0xFFFFFF",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var color = new color_1.Color(255, 255, 255);\nvar numberValue = color.getValue();\nchai_1.expect(numberValue).deep.eq(0xFFFFFF);",
              "err": {},
              "uuid": "974e9602-d943-45ba-828a-dae0d61c2928",
              "parentUUID": "130faea3-11ad-417f-a654-763d49c44dda",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "new Color(0, 0, 0, \"1ac3ef\") should give the color number : 1754095",
              "fullTitle": "Color Test new Color(0, 0, 0, \"1ac3ef\") should give the color number : 1754095",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var color = new color_1.Color(0, 0, 0, \"1ac3ef\");\nchai_1.expect(__assign({}, color)).deep.eq({\n    blue: 239,\n    color: \"1AC3EF\",\n    green: 195,\n    red: 26,\n});",
              "err": {},
              "uuid": "5dc45e0c-f698-46b8-b192-56fa0a2b74e9",
              "parentUUID": "130faea3-11ad-417f-a654-763d49c44dda",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aa165300-5c5d-4279-8ef0-6a6bc0b31652",
            "77724e39-29da-4fc9-b25f-4e7cfb16ea4c",
            "974e9602-d943-45ba-828a-dae0d61c2928",
            "5dc45e0c-f698-46b8-b192-56fa0a2b74e9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "c345bef1-8499-42de-8266-99282873f61f",
          "title": "Discover Class Test",
          "fullFile": "/home/runner/work/yeelight/yeelight/test/discover.test.ts",
          "file": "/test/discover.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Discover Class Test\"",
              "fullTitle": "Discover Class Test \"before each\" hook in \"Discover Class Test\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var me = TestUtils;\nserver = net_1.createServer(function (s) {\n    socket = s;\n    socket.on(\"data\", function (incomming) {\n        validateFunc(JSON.parse(incomming.toString()));\n        if (data) {\n            socket.write(JSON.stringify(data));\n        }\n    });\n    // socket.pipe(socket);\n});\nserver.on(\"connection\", function (s) { return socket = s; });\n// console.log(\"this.port\", me.port);\nserver.listen(me.port, \"127.0.0.1\", done);\n//done();",
              "err": {},
              "uuid": "b059dbe3-92c5-417a-ae8e-57f99676d470",
              "parentUUID": "c345bef1-8499-42de-8266-99282873f61f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Discover Class Test\"",
              "fullTitle": "Discover Class Test \"after each\" hook in \"Discover Class Test\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// TestUtils.port++;\nif (socket) {\n    socket.removeAllListeners();\n    socket.end();\n    socket.destroy();\n}\nif (server) {\n    server.removeAllListeners();\n    server.close(done);\n}\nelse {\n    done();\n}",
              "err": {},
              "uuid": "00061750-1b51-483a-88f6-318dd3357ad2",
              "parentUUID": "c345bef1-8499-42de-8266-99282873f61f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "discover() should find bulbs",
              "fullTitle": "Discover Class Test discover() should find bulbs",
              "timedOut": false,
              "duration": 211,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var discover, devices;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    discover = new discover_1.Discover({\n                        limit: 1,\n                        timeout: 1000,\n                    });\n                    setTimeout(function () {\n                        // Mock message received:\n                        var message = \"HTTP/1.1 200 OK\\r\\n\\\nCache-Control: max-age=3584\\r\\n\\\nDate:\\r\\n\\\nExt:\\r\\n\\\nLocation: yeelight://192.168.0.42:55443\\r\\n\\\nServer: POSIX UPnP/1.0 YGLC/1\\r\\n\\\nid: 0x000000000af2608f\\r\\n\\\nmodel: color\\r\\n\\\nfw_ver: 26\\r\\n\\\nsupport: get_prop set_default set_power toggle set_bright start_cf \\r\\n\\\nstop_cf set_scene cron_add cron_get cron_del set_ct_abx set_rgb set_hsv \\r\\n\\\nset_adjust adjust_bright adjust_ct adjust_color set_music set\\r\\n\\\npower: on\\r\\n\\\nbright: 1\\r\\n\\\ncolor_mode: 1\\r\\n\\\nct: 2234\\r\\n\\\nrgb: 65280\\r\\n\\\nhue: 240\\r\\n\\\nsat: 100\\r\\n\\\nname: new_name\";\n                        // @ts-ignore private\n                        discover.onSocketMessage(Buffer.from(message), {\n                            address: \"192.168.0.42\",\n                            family: \"IPv4\",\n                            port: 49155,\n                            // size: message.length\n                        });\n                    }, 100);\n                    return [4 /*yield*/, discover.start()];\n                case 1:\n                    devices = _a.sent();\n                    chai_1.expect(devices.length).to.eq(1);\n                    chai_1.expect(devices[0].id).to.eq(\"0x000000000af2608f\");\n                    chai_1.expect(devices[0].host).to.eq(\"192.168.0.42\");\n                    chai_1.expect(devices[0].port).to.eq(55443);\n                    discover.destroy();\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "e0c8f862-cefb-4e17-80ae-1b3919cd0c7c",
              "parentUUID": "c345bef1-8499-42de-8266-99282873f61f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e0c8f862-cefb-4e17-80ae-1b3919cd0c7c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 211,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "c8e2494d-505c-4db9-849d-8f0c22743205",
          "title": "Util Test",
          "fullFile": "/home/runner/work/yeelight/yeelight/test/util.test.ts",
          "file": "/test/util.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "parseDeviceInfo() should successful parse valid message",
              "fullTitle": "Util Test parseDeviceInfo() should successful parse valid message",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var message = fs.readFileSync(path.join(__dirname, \"./data/valid-message.txt\"), \"utf8\");\nvar device = utils_1.Utils.parseDeviceInfo(message);\nvar outputExpected = require(\"./data/valid-device.json\");\nchai_1.expect(device).not.eq(null);\nchai_1.expect(device).deep.eq(outputExpected);",
              "err": {},
              "uuid": "0a7b4e04-32c1-4808-8de7-327b7c9db1c2",
              "parentUUID": "c8e2494d-505c-4db9-849d-8f0c22743205",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getListIpAddress should get the arround ip address first",
              "fullTitle": "Util Test getListIpAddress should get the arround ip address first",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var ip = \"192.168.1.5\";\nvar output = utils_1.Utils.getListIpAddress(ip, 1, 10);\nchai_1.expect(output).to.deep.eq([\n    \"192.168.1.4\",\n    \"192.168.1.6\",\n    \"192.168.1.3\",\n    \"192.168.1.7\",\n    \"192.168.1.2\",\n    \"192.168.1.8\",\n    \"192.168.1.1\",\n    \"192.168.1.9\",\n    \"192.168.1.10\",\n]);",
              "err": {},
              "uuid": "9df45c3b-1740-44c1-8031-2e18a81d05b4",
              "parentUUID": "c8e2494d-505c-4db9-849d-8f0c22743205",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "3fe9f0ee-72be-4297-8052-b8eb2cffaf89",
              "title": "hexToNumber() test",
              "fullFile": "/home/runner/work/yeelight/yeelight/test/util.test.ts",
              "file": "/test/util.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "numberToHex(1) should equal to 1",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(1) should equal to 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "1c74ead0-a17b-4188-bad4-73e41eacf8d8",
                  "parentUUID": "3fe9f0ee-72be-4297-8052-b8eb2cffaf89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(10) should equal to 16",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(10) should equal to 16",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "38a58ee7-6414-47eb-b92c-054b5d4e1947",
                  "parentUUID": "3fe9f0ee-72be-4297-8052-b8eb2cffaf89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(14) should equal to 20",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(14) should equal to 20",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "40055734-3a02-45b9-af52-1160217b70ca",
                  "parentUUID": "3fe9f0ee-72be-4297-8052-b8eb2cffaf89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(44) should equal to 68",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(44) should equal to 68",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "51a30659-27bc-4533-b031-612cede203c2",
                  "parentUUID": "3fe9f0ee-72be-4297-8052-b8eb2cffaf89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(A) should equal to 10",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(A) should equal to 10",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "a87f937c-e3a0-482e-8d97-2f03523de8a7",
                  "parentUUID": "3fe9f0ee-72be-4297-8052-b8eb2cffaf89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(F) should equal to 15",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(F) should equal to 15",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "21afa91b-8614-43d9-bb09-63b9803c8969",
                  "parentUUID": "3fe9f0ee-72be-4297-8052-b8eb2cffaf89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(1A) should equal to 26",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(1A) should equal to 26",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "c2460b9c-193d-4633-9988-84b8000d0461",
                  "parentUUID": "3fe9f0ee-72be-4297-8052-b8eb2cffaf89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(FF) should equal to 255",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(FF) should equal to 255",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "5d37f86b-867a-426d-a972-659fa43cc77f",
                  "parentUUID": "3fe9f0ee-72be-4297-8052-b8eb2cffaf89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(AB) should equal to 171",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(AB) should equal to 171",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "617ba045-4860-4604-b4ac-f156722897a8",
                  "parentUUID": "3fe9f0ee-72be-4297-8052-b8eb2cffaf89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(A123BE) should equal to 10560446",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(A123BE) should equal to 10560446",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "9fe46c53-2dce-46c8-8fbb-35f0b1ad8b8f",
                  "parentUUID": "3fe9f0ee-72be-4297-8052-b8eb2cffaf89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(1234567890ABCDEF) should equal to 1311768467294899700",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(1234567890ABCDEF) should equal to 1311768467294899700",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "7b579983-0b55-4e1e-82d5-308a3f9bc2de",
                  "parentUUID": "3fe9f0ee-72be-4297-8052-b8eb2cffaf89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(ABCFED) should equal to 11259885",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(ABCFED) should equal to 11259885",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "360926cf-f377-4c16-a9d4-51ab1975c977",
                  "parentUUID": "3fe9f0ee-72be-4297-8052-b8eb2cffaf89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(abccde) should equal to 11259102",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(abccde) should equal to 11259102",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "dfa9de87-d183-4cc8-8514-043aed8675f2",
                  "parentUUID": "3fe9f0ee-72be-4297-8052-b8eb2cffaf89",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c74ead0-a17b-4188-bad4-73e41eacf8d8",
                "38a58ee7-6414-47eb-b92c-054b5d4e1947",
                "40055734-3a02-45b9-af52-1160217b70ca",
                "51a30659-27bc-4533-b031-612cede203c2",
                "a87f937c-e3a0-482e-8d97-2f03523de8a7",
                "21afa91b-8614-43d9-bb09-63b9803c8969",
                "c2460b9c-193d-4633-9988-84b8000d0461",
                "5d37f86b-867a-426d-a972-659fa43cc77f",
                "617ba045-4860-4604-b4ac-f156722897a8",
                "9fe46c53-2dce-46c8-8fbb-35f0b1ad8b8f",
                "7b579983-0b55-4e1e-82d5-308a3f9bc2de",
                "360926cf-f377-4c16-a9d4-51ab1975c977",
                "dfa9de87-d183-4cc8-8514-043aed8675f2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [
            "0a7b4e04-32c1-4808-8de7-327b7c9db1c2",
            "9df45c3b-1740-44c1-8031-2e18a81d05b4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "45cbcc15-ac4d-48df-af2e-057ad557d4f1",
          "title": "Yeelight Class Test",
          "fullFile": "/home/runner/work/yeelight/yeelight/test/yeelight.test.ts",
          "file": "/test/yeelight.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Yeelight Class Test\"",
              "fullTitle": "Yeelight Class Test \"before each\" hook in \"Yeelight Class Test\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var me = TestUtils;\nserver = net_1.createServer(function (s) {\n    socket = s;\n    socket.on(\"data\", function (incomming) {\n        validateFunc(JSON.parse(incomming.toString()));\n        if (data) {\n            socket.write(JSON.stringify(data));\n        }\n    });\n    // socket.pipe(socket);\n});\nserver.on(\"connection\", function (s) { return socket = s; });\n// console.log(\"this.port\", me.port);\nserver.listen(me.port, \"127.0.0.1\", done);\n//done();",
              "err": {},
              "uuid": "e26c7f05-4c05-423d-9821-17de70d0df43",
              "parentUUID": "45cbcc15-ac4d-48df-af2e-057ad557d4f1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Yeelight Class Test\"",
              "fullTitle": "Yeelight Class Test \"after each\" hook in \"Yeelight Class Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// TestUtils.port++;\nif (socket) {\n    socket.removeAllListeners();\n    socket.end();\n    socket.destroy();\n}\nif (server) {\n    server.removeAllListeners();\n    server.close(done);\n}\nelse {\n    done();\n}",
              "err": {},
              "uuid": "a098fa0e-d270-4764-b18d-5ca7bace8f42",
              "parentUUID": "45cbcc15-ac4d-48df-af2e-057ad557d4f1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "connect() should success",
              "fullTitle": "Yeelight Class Test connect() should success",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var yeelight, y;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    yeelight = new yeelight_1.Yeelight(options);\n                    return [4 /*yield*/, yeelight.connect()];\n                case 1:\n                    y = _a.sent();\n                    chai_1.expect(y).not.eq(null);\n                    chai_1.expect(y.connected).to.eq(true);\n                    y.disconnect();\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "7d53bdc0-d7a0-40ed-b7c8-2ffe5b7abfc5",
              "parentUUID": "45cbcc15-ac4d-48df-af2e-057ad557d4f1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "cf617382-83d9-423e-9b79-f7eb59f60680",
              "title": "setName() tests",
              "fullFile": "/home/runner/work/yeelight/yeelight/test/yeelight.test.ts",
              "file": "/test/yeelight.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setName() should work when send valid message",
                  "fullTitle": "Yeelight Class Test setName() tests setName() should work when send valid message",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options.lightPort = test_util_1.TestUtils.port;\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        test_util_1.TestUtils.mockSocket({ id: 1, result: [\"ok\"] }, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"unit_test\"],\n                            });\n                        });\n                        return [4 /*yield*/, y.setName(\"unit_test\")];\n                    case 2:\n                        result = _a.sent();\n                        chai_1.expect(result).to.not.eq(null);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                  "err": {},
                  "uuid": "bbd9ae3e-0803-47ca-a22a-50e954d65be1",
                  "parentUUID": "cf617382-83d9-423e-9b79-f7eb59f60680",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setName() should fire commandSuccess, set_name, set_name_sent event",
                  "fullTitle": "Yeelight Class Test setName() tests setName() should fire commandSuccess, set_name, set_name_sent event",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, expectData, spy1, spy2, spy3, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        options.lightPort = test_util_1.TestUtils.port;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        expectData = {\n                            action: \"set_name\",\n                            command: new models_1.Command(1, models_1.CommandType.SET_NAME, [\"unit_test\"]),\n                            result: { id: 1, result: [\"ok\"] },\n                            success: true,\n                        };\n                        spy1 = sinon_1.spy();\n                        spy2 = sinon_1.spy();\n                        spy3 = sinon_1.spy();\n                        y.once(\"set_name\", spy1);\n                        y.once(\"commandSuccess\", spy2);\n                        y.once(\"set_name_sent\", spy3);\n                        test_util_1.TestUtils.mockSocket({ id: 1, result: [\"ok\"] }, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"unit_test\"],\n                            });\n                        });\n                        return [4 /*yield*/, y.setName(\"unit_test\")];\n                    case 2:\n                        result = _a.sent();\n                        chai_1.expect(__assign({}, result)).to.deep.equal(expectData);\n                        sinon_1.assert.calledWith(spy1, expectData);\n                        sinon_1.assert.calledWith(spy2, expectData);\n                        sinon_1.assert.calledWith(spy3, expectData.command);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                  "err": {},
                  "uuid": "4a6b51a3-59c8-404e-8474-e178f9df09eb",
                  "parentUUID": "cf617382-83d9-423e-9b79-f7eb59f60680",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setName() should fire error when send invalid name, should fire set_name, commandError, set_name_sent events",
                  "fullTitle": "Yeelight Class Test setName() tests setName() should fire error when send invalid name, should fire set_name, commandError, set_name_sent events",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, expectData1, spy1, spy2, spy3, result, errResult, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        options.lightPort = test_util_1.TestUtils.port;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        expectData1 = {\n                            action: \"set_name\",\n                            command: new models_1.Command(1, models_1.CommandType.SET_NAME, [\"this is invalid name\"]),\n                            result: { id: 1, error: { code: -1, message: \"General error\" } },\n                            success: false,\n                        };\n                        spy1 = sinon_1.spy();\n                        spy2 = sinon_1.spy();\n                        spy3 = sinon_1.spy();\n                        y.once(\"set_name\", spy1);\n                        y.once(\"commandError\", spy2);\n                        y.once(\"set_name_sent\", spy3);\n                        test_util_1.TestUtils.mockSocket({ id: 1, error: { code: -1, message: \"General error\" } }, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"this is invalid name\"],\n                            });\n                        });\n                        result = null;\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, y.setName(\"this is invalid name\")];\n                    case 3:\n                        result = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_1 = _a.sent();\n                        errResult = error_1;\n                        return [3 /*break*/, 5];\n                    case 5:\n                        chai_1.expect(result).to.be.equal(null);\n                        chai_1.expect(__assign({}, errResult)).to.deep.equal(expectData1);\n                        sinon_1.assert.calledWith(spy1, expectData1);\n                        sinon_1.assert.calledWith(spy2, expectData1);\n                        sinon_1.assert.calledWith(spy3, expectData1.command);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                  "err": {},
                  "uuid": "b9a1f5a0-c3b5-4ffa-b57f-2a410a8aac9c",
                  "parentUUID": "cf617382-83d9-423e-9b79-f7eb59f60680",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setName() should reject promise, raise commandTimedout event when socket not response",
                  "fullTitle": "Yeelight Class Test setName() tests setName() should reject promise, raise commandTimedout event when socket not response",
                  "timedOut": false,
                  "duration": 2001,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, expectData, spy2, spy3, result, err_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        options.lightPort = test_util_1.TestUtils.port;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        expectData = {\n                            action: \"set_name\",\n                            command: new models_1.Command(1, models_1.CommandType.SET_NAME, [\"mybulb\"]),\n                            success: false,\n                        };\n                        spy2 = sinon_1.spy();\n                        spy3 = sinon_1.spy();\n                        y.once(\"commandTimedout\", spy2);\n                        y.once(\"set_name_sent\", spy3);\n                        test_util_1.TestUtils.mockSocket(null, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"mybulb\"],\n                            });\n                        });\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, y.setName(\"mybulb\")];\n                    case 3:\n                        result = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_1 = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 5:\n                        sinon_1.assert.calledWith(spy2, expectData.command);\n                        sinon_1.assert.calledWith(spy3, expectData.command);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                  "err": {},
                  "uuid": "9363d081-02ec-41ad-978f-e9d9dcf64b8b",
                  "parentUUID": "cf617382-83d9-423e-9b79-f7eb59f60680",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bbd9ae3e-0803-47ca-a22a-50e954d65be1",
                "4a6b51a3-59c8-404e-8474-e178f9df09eb",
                "b9a1f5a0-c3b5-4ffa-b57f-2a410a8aac9c",
                "9363d081-02ec-41ad-978f-e9d9dcf64b8b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2009,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "b93854c6-60c2-42da-ab30-a9b7a79b9cd7",
              "title": "manipulator methods",
              "fullFile": "/home/runner/work/yeelight/yeelight/test/yeelight.test.ts",
              "file": "/test/yeelight.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "method toggle should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method toggle should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "307d4b0b-2ec9-408d-ae75-792728cdf00a",
                  "parentUUID": "b93854c6-60c2-42da-ab30-a9b7a79b9cd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method cronAdd should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method cronAdd should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "7fd7ce33-65f0-43e7-8daf-66e45468de3f",
                  "parentUUID": "b93854c6-60c2-42da-ab30-a9b7a79b9cd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method cronGet should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method cronGet should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "23cb8860-3af5-4bfd-8e16-61356381aa6a",
                  "parentUUID": "b93854c6-60c2-42da-ab30-a9b7a79b9cd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method cronDelete should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method cronDelete should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "7ba7a5eb-2e76-4a6f-94ef-565e8066b60b",
                  "parentUUID": "b93854c6-60c2-42da-ab30-a9b7a79b9cd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setDefault should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setDefault should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "8dbc39d1-fb97-41da-a256-a3c4d5f8acec",
                  "parentUUID": "b93854c6-60c2-42da-ab30-a9b7a79b9cd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method startColorFlow should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method startColorFlow should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "3b376cdd-6b11-4acb-aa58-146afa211a4c",
                  "parentUUID": "b93854c6-60c2-42da-ab30-a9b7a79b9cd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method stopColorFlow should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method stopColorFlow should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "f1f43a31-0a59-4982-8103-03343481cc59",
                  "parentUUID": "b93854c6-60c2-42da-ab30-a9b7a79b9cd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method getProperty should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method getProperty should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "2937dd07-d784-4369-b25f-de756734800d",
                  "parentUUID": "b93854c6-60c2-42da-ab30-a9b7a79b9cd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setCtAbx should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setCtAbx should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "8bac5937-33ab-41f0-bcc6-cd3c7bca958d",
                  "parentUUID": "b93854c6-60c2-42da-ab30-a9b7a79b9cd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setRGB should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setRGB should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "a6cfa9a0-6624-4829-a54d-eb284c711dc9",
                  "parentUUID": "b93854c6-60c2-42da-ab30-a9b7a79b9cd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setHSV should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setHSV should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "68b2b9c9-775f-4050-a6bb-54f8b951b050",
                  "parentUUID": "b93854c6-60c2-42da-ab30-a9b7a79b9cd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setBright should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setBright should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "ae262105-19ed-4c0c-bc2c-da99344b7d53",
                  "parentUUID": "b93854c6-60c2-42da-ab30-a9b7a79b9cd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setAdjust should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setAdjust should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "cbf3a875-6ad8-4c0f-8d97-d6b0db629615",
                  "parentUUID": "b93854c6-60c2-42da-ab30-a9b7a79b9cd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setName should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setName should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "0dd580aa-b350-407b-a012-5f87ec009aa0",
                  "parentUUID": "b93854c6-60c2-42da-ab30-a9b7a79b9cd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method adjust should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method adjust should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "902e7c78-dcce-481f-8194-4496d5066591",
                  "parentUUID": "b93854c6-60c2-42da-ab30-a9b7a79b9cd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method ping should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method ping should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "70b28376-e373-45cb-8c5f-c93915eb6287",
                  "parentUUID": "b93854c6-60c2-42da-ab30-a9b7a79b9cd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setScene should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setScene should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "a5ee797e-5de7-4579-8b99-3b3f69816add",
                  "parentUUID": "b93854c6-60c2-42da-ab30-a9b7a79b9cd7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "307d4b0b-2ec9-408d-ae75-792728cdf00a",
                "7fd7ce33-65f0-43e7-8daf-66e45468de3f",
                "23cb8860-3af5-4bfd-8e16-61356381aa6a",
                "7ba7a5eb-2e76-4a6f-94ef-565e8066b60b",
                "8dbc39d1-fb97-41da-a256-a3c4d5f8acec",
                "3b376cdd-6b11-4acb-aa58-146afa211a4c",
                "f1f43a31-0a59-4982-8103-03343481cc59",
                "2937dd07-d784-4369-b25f-de756734800d",
                "8bac5937-33ab-41f0-bcc6-cd3c7bca958d",
                "a6cfa9a0-6624-4829-a54d-eb284c711dc9",
                "68b2b9c9-775f-4050-a6bb-54f8b951b050",
                "ae262105-19ed-4c0c-bc2c-da99344b7d53",
                "cbf3a875-6ad8-4c0f-8d97-d6b0db629615",
                "0dd580aa-b350-407b-a012-5f87ec009aa0",
                "902e7c78-dcce-481f-8194-4496d5066591",
                "70b28376-e373-45cb-8c5f-c93915eb6287",
                "a5ee797e-5de7-4579-8b99-3b3f69816add"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [
            "7d53bdc0-d7a0-40ed-b7c8-2ffe5b7abfc5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}