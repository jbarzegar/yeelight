{
  "stats": {
    "suites": 7,
    "tests": 42,
    "passes": 42,
    "pending": 0,
    "failures": 0,
    "start": "2021-06-27T11:51:27.432Z",
    "end": "2021-06-27T11:51:29.710Z",
    "duration": 2278,
    "testsRegistered": 42,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a5977fa7-601e-49c1-8ee8-f03af2e45736",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8edf91ce-abf5-40a4-b9dd-82f2e0a81f2c",
          "title": "Color Test",
          "fullFile": "/home/runner/work/yeelight/yeelight/test/color.test.ts",
          "file": "/test/color.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "new Color(\"string\") should conver hex string to color object",
              "fullTitle": "Color Test new Color(\"string\") should conver hex string to color object",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var color = new color_1.Color(0, 0, 0, \"FFFFFF\");\nchai_1.expect(__assign({}, color)).deep.eq({\n    blue: 255,\n    color: \"FFFFFF\",\n    green: 255,\n    red: 255,\n});",
              "err": {},
              "uuid": "6319bd70-04de-4cc0-84b6-db41a9c39e3a",
              "parentUUID": "8edf91ce-abf5-40a4-b9dd-82f2e0a81f2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "new Color(123, 44, 55) should give the color number : 0x7B2C37",
              "fullTitle": "Color Test new Color(123, 44, 55) should give the color number : 0x7B2C37",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var color = new color_1.Color(123, 44, 55);\nvar numberValue = color.getValue();\nchai_1.expect(numberValue).deep.eq(0x7B2C37);",
              "err": {},
              "uuid": "bbd34cc9-8207-4bbb-b3b1-3eea5de8b9b7",
              "parentUUID": "8edf91ce-abf5-40a4-b9dd-82f2e0a81f2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "new Color(255, 255, 255) should give the color number : 0xFFFFFF",
              "fullTitle": "Color Test new Color(255, 255, 255) should give the color number : 0xFFFFFF",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var color = new color_1.Color(255, 255, 255);\nvar numberValue = color.getValue();\nchai_1.expect(numberValue).deep.eq(0xFFFFFF);",
              "err": {},
              "uuid": "47f89f2a-dc47-4c2e-8528-8da410303634",
              "parentUUID": "8edf91ce-abf5-40a4-b9dd-82f2e0a81f2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "new Color(0, 0, 0, \"1ac3ef\") should give the color number : 1754095",
              "fullTitle": "Color Test new Color(0, 0, 0, \"1ac3ef\") should give the color number : 1754095",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var color = new color_1.Color(0, 0, 0, \"1ac3ef\");\nchai_1.expect(__assign({}, color)).deep.eq({\n    blue: 239,\n    color: \"1AC3EF\",\n    green: 195,\n    red: 26,\n});",
              "err": {},
              "uuid": "5c35bd55-2b90-488a-945c-0c686859b5e8",
              "parentUUID": "8edf91ce-abf5-40a4-b9dd-82f2e0a81f2c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6319bd70-04de-4cc0-84b6-db41a9c39e3a",
            "bbd34cc9-8207-4bbb-b3b1-3eea5de8b9b7",
            "47f89f2a-dc47-4c2e-8528-8da410303634",
            "5c35bd55-2b90-488a-945c-0c686859b5e8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "6897de5c-0fb3-4dab-b9fd-d3a13274ad63",
          "title": "Discover Class Test",
          "fullFile": "/home/runner/work/yeelight/yeelight/test/discover.test.ts",
          "file": "/test/discover.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Discover Class Test\"",
              "fullTitle": "Discover Class Test \"before each\" hook in \"Discover Class Test\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var me = TestUtils;\nserver = net_1.createServer(function (s) {\n    socket = s;\n    socket.on(\"data\", function (incomming) {\n        validateFunc(JSON.parse(incomming.toString()));\n        if (data) {\n            socket.write(JSON.stringify(data));\n        }\n    });\n    // socket.pipe(socket);\n});\nserver.on(\"connection\", function (s) { return socket = s; });\n// console.log(\"this.port\", me.port);\nserver.listen(me.port, \"127.0.0.1\", done);\n//done();",
              "err": {},
              "uuid": "0e4e764d-b05b-494d-af28-ff64ffe9d877",
              "parentUUID": "6897de5c-0fb3-4dab-b9fd-d3a13274ad63",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Discover Class Test\"",
              "fullTitle": "Discover Class Test \"after each\" hook in \"Discover Class Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// TestUtils.port++;\nif (socket) {\n    socket.removeAllListeners();\n    socket.end();\n    socket.destroy();\n}\nif (server) {\n    server.removeAllListeners();\n    server.close(done);\n}\nelse {\n    done();\n}",
              "err": {},
              "uuid": "1fe8546f-f5cf-4b9d-8914-fd6a32a5b0e6",
              "parentUUID": "6897de5c-0fb3-4dab-b9fd-d3a13274ad63",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "discover() should find bulbs",
              "fullTitle": "Discover Class Test discover() should find bulbs",
              "timedOut": false,
              "duration": 204,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var discover, devices;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    discover = new discover_1.Discover({\n                        limit: 1,\n                        timeout: 1000,\n                    });\n                    setTimeout(function () {\n                        // Mock message received:\n                        var message = \"HTTP/1.1 200 OK\\r\\n\\\nCache-Control: max-age=3584\\r\\n\\\nDate:\\r\\n\\\nExt:\\r\\n\\\nLocation: yeelight://192.168.0.42:55443\\r\\n\\\nServer: POSIX UPnP/1.0 YGLC/1\\r\\n\\\nid: 0x000000000af2608f\\r\\n\\\nmodel: color\\r\\n\\\nfw_ver: 26\\r\\n\\\nsupport: get_prop set_default set_power toggle set_bright start_cf \\r\\n\\\nstop_cf set_scene cron_add cron_get cron_del set_ct_abx set_rgb set_hsv \\r\\n\\\nset_adjust adjust_bright adjust_ct adjust_color set_music set\\r\\n\\\npower: on\\r\\n\\\nbright: 1\\r\\n\\\ncolor_mode: 1\\r\\n\\\nct: 2234\\r\\n\\\nrgb: 65280\\r\\n\\\nhue: 240\\r\\n\\\nsat: 100\\r\\n\\\nname: new_name\";\n                        // @ts-ignore private\n                        discover.onSocketMessage(Buffer.from(message), {\n                            address: \"192.168.0.42\",\n                            family: \"IPv4\",\n                            port: 49155,\n                            // size: message.length\n                        });\n                    }, 100);\n                    return [4 /*yield*/, discover.start()];\n                case 1:\n                    devices = _a.sent();\n                    chai_1.expect(devices.length).to.eq(1);\n                    chai_1.expect(devices[0].id).to.eq(\"0x000000000af2608f\");\n                    chai_1.expect(devices[0].host).to.eq(\"192.168.0.42\");\n                    chai_1.expect(devices[0].port).to.eq(55443);\n                    discover.destroy();\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "317492cb-0864-4ef2-aa1b-830387975124",
              "parentUUID": "6897de5c-0fb3-4dab-b9fd-d3a13274ad63",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "317492cb-0864-4ef2-aa1b-830387975124"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 204,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "65705484-3ed6-45a2-ae21-7051edc2980c",
          "title": "Util Test",
          "fullFile": "/home/runner/work/yeelight/yeelight/test/util.test.ts",
          "file": "/test/util.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "parseDeviceInfo() should successful parse valid message",
              "fullTitle": "Util Test parseDeviceInfo() should successful parse valid message",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var message = fs.readFileSync(path.join(__dirname, \"./data/valid-message.txt\"), \"utf8\");\nvar device = utils_1.Utils.parseDeviceInfo(message);\nvar outputExpected = require(\"./data/valid-device.json\");\nchai_1.expect(device).not.eq(null);\nchai_1.expect(device).deep.eq(outputExpected);",
              "err": {},
              "uuid": "49c8f2dd-8a36-4878-a550-b886d80c976a",
              "parentUUID": "65705484-3ed6-45a2-ae21-7051edc2980c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getListIpAddress should get the arround ip address first",
              "fullTitle": "Util Test getListIpAddress should get the arround ip address first",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var ip = \"192.168.1.5\";\nvar output = utils_1.Utils.getListIpAddress(ip, 1, 10);\nchai_1.expect(output).to.deep.eq([\n    \"192.168.1.4\",\n    \"192.168.1.6\",\n    \"192.168.1.3\",\n    \"192.168.1.7\",\n    \"192.168.1.2\",\n    \"192.168.1.8\",\n    \"192.168.1.1\",\n    \"192.168.1.9\",\n    \"192.168.1.10\",\n]);",
              "err": {},
              "uuid": "606952cf-72e5-49e8-9c6e-324fc1f32b78",
              "parentUUID": "65705484-3ed6-45a2-ae21-7051edc2980c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "a00de5d7-be6d-4b40-8b34-0b55593b9160",
              "title": "hexToNumber() test",
              "fullFile": "/home/runner/work/yeelight/yeelight/test/util.test.ts",
              "file": "/test/util.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "numberToHex(1) should equal to 1",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(1) should equal to 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "0ebbbf26-0588-4744-9509-1e532b99572f",
                  "parentUUID": "a00de5d7-be6d-4b40-8b34-0b55593b9160",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(10) should equal to 16",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(10) should equal to 16",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "da892e15-c0d3-42b8-899e-1b71209a68ea",
                  "parentUUID": "a00de5d7-be6d-4b40-8b34-0b55593b9160",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(14) should equal to 20",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(14) should equal to 20",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "7945ccac-6976-47d5-a55c-5c66a2d67717",
                  "parentUUID": "a00de5d7-be6d-4b40-8b34-0b55593b9160",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(44) should equal to 68",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(44) should equal to 68",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "0b56bda4-a2da-444d-9d9f-66faf6eada13",
                  "parentUUID": "a00de5d7-be6d-4b40-8b34-0b55593b9160",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(A) should equal to 10",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(A) should equal to 10",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "378cedde-38f7-47d6-bad6-4c27914e1b3e",
                  "parentUUID": "a00de5d7-be6d-4b40-8b34-0b55593b9160",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(F) should equal to 15",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(F) should equal to 15",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "82b3c311-8b17-440f-932d-515e620e02ec",
                  "parentUUID": "a00de5d7-be6d-4b40-8b34-0b55593b9160",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(1A) should equal to 26",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(1A) should equal to 26",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "b7a8b441-1456-4b1d-b242-bd45d2b44812",
                  "parentUUID": "a00de5d7-be6d-4b40-8b34-0b55593b9160",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(FF) should equal to 255",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(FF) should equal to 255",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "74dc155b-0864-4c7a-be96-4075903f0c35",
                  "parentUUID": "a00de5d7-be6d-4b40-8b34-0b55593b9160",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(AB) should equal to 171",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(AB) should equal to 171",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "83fbeab0-3305-4d4e-ab1c-3d3b1791eb24",
                  "parentUUID": "a00de5d7-be6d-4b40-8b34-0b55593b9160",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(A123BE) should equal to 10560446",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(A123BE) should equal to 10560446",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "bd4af329-01c2-458b-b042-f2e812d4831b",
                  "parentUUID": "a00de5d7-be6d-4b40-8b34-0b55593b9160",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(1234567890ABCDEF) should equal to 1311768467294899700",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(1234567890ABCDEF) should equal to 1311768467294899700",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "77b8dd76-a6db-42f3-9fa4-1867ad3cbfce",
                  "parentUUID": "a00de5d7-be6d-4b40-8b34-0b55593b9160",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(ABCFED) should equal to 11259885",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(ABCFED) should equal to 11259885",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "3c327cd0-6365-4a57-b92f-87ac0fabbe60",
                  "parentUUID": "a00de5d7-be6d-4b40-8b34-0b55593b9160",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(abccde) should equal to 11259102",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(abccde) should equal to 11259102",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "7affb1bb-5642-4262-8e9b-ff9c8193e5bc",
                  "parentUUID": "a00de5d7-be6d-4b40-8b34-0b55593b9160",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ebbbf26-0588-4744-9509-1e532b99572f",
                "da892e15-c0d3-42b8-899e-1b71209a68ea",
                "7945ccac-6976-47d5-a55c-5c66a2d67717",
                "0b56bda4-a2da-444d-9d9f-66faf6eada13",
                "378cedde-38f7-47d6-bad6-4c27914e1b3e",
                "82b3c311-8b17-440f-932d-515e620e02ec",
                "b7a8b441-1456-4b1d-b242-bd45d2b44812",
                "74dc155b-0864-4c7a-be96-4075903f0c35",
                "83fbeab0-3305-4d4e-ab1c-3d3b1791eb24",
                "bd4af329-01c2-458b-b042-f2e812d4831b",
                "77b8dd76-a6db-42f3-9fa4-1867ad3cbfce",
                "3c327cd0-6365-4a57-b92f-87ac0fabbe60",
                "7affb1bb-5642-4262-8e9b-ff9c8193e5bc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [
            "49c8f2dd-8a36-4878-a550-b886d80c976a",
            "606952cf-72e5-49e8-9c6e-324fc1f32b78"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "0f1e1ecc-b604-4dde-ac20-f9991c7a3d20",
          "title": "Yeelight Class Test",
          "fullFile": "/home/runner/work/yeelight/yeelight/test/yeelight.test.ts",
          "file": "/test/yeelight.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Yeelight Class Test\"",
              "fullTitle": "Yeelight Class Test \"before each\" hook in \"Yeelight Class Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var me = TestUtils;\nserver = net_1.createServer(function (s) {\n    socket = s;\n    socket.on(\"data\", function (incomming) {\n        validateFunc(JSON.parse(incomming.toString()));\n        if (data) {\n            socket.write(JSON.stringify(data));\n        }\n    });\n    // socket.pipe(socket);\n});\nserver.on(\"connection\", function (s) { return socket = s; });\n// console.log(\"this.port\", me.port);\nserver.listen(me.port, \"127.0.0.1\", done);\n//done();",
              "err": {},
              "uuid": "10f771d2-c7e4-495d-8615-6617cb78a273",
              "parentUUID": "0f1e1ecc-b604-4dde-ac20-f9991c7a3d20",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Yeelight Class Test\"",
              "fullTitle": "Yeelight Class Test \"after each\" hook in \"Yeelight Class Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// TestUtils.port++;\nif (socket) {\n    socket.removeAllListeners();\n    socket.end();\n    socket.destroy();\n}\nif (server) {\n    server.removeAllListeners();\n    server.close(done);\n}\nelse {\n    done();\n}",
              "err": {},
              "uuid": "3f72949f-5039-4cc0-bf86-43e5c1ebf412",
              "parentUUID": "0f1e1ecc-b604-4dde-ac20-f9991c7a3d20",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "connect() should success",
              "fullTitle": "Yeelight Class Test connect() should success",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var yeelight, y;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    yeelight = new yeelight_1.Yeelight(options);\n                    return [4 /*yield*/, yeelight.connect()];\n                case 1:\n                    y = _a.sent();\n                    chai_1.expect(y).not.eq(null);\n                    chai_1.expect(y.connected).to.eq(true);\n                    y.disconnect();\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "3f63c8d3-7a51-47f9-9e8d-569f61405d25",
              "parentUUID": "0f1e1ecc-b604-4dde-ac20-f9991c7a3d20",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "c996733d-eea1-4a34-a94f-f9dd0c63d223",
              "title": "setName() tests",
              "fullFile": "/home/runner/work/yeelight/yeelight/test/yeelight.test.ts",
              "file": "/test/yeelight.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setName() should work when send valid message",
                  "fullTitle": "Yeelight Class Test setName() tests setName() should work when send valid message",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options.lightPort = test_util_1.TestUtils.port;\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        test_util_1.TestUtils.mockSocket({ id: 1, result: [\"ok\"] }, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"unit_test\"],\n                            });\n                        });\n                        return [4 /*yield*/, y.setName(\"unit_test\")];\n                    case 2:\n                        result = _a.sent();\n                        chai_1.expect(result).to.not.eq(null);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                  "err": {},
                  "uuid": "3e995e3e-3555-4fa3-8d57-908e527559c8",
                  "parentUUID": "c996733d-eea1-4a34-a94f-f9dd0c63d223",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setName() should fire commandSuccess, set_name, set_name_sent event",
                  "fullTitle": "Yeelight Class Test setName() tests setName() should fire commandSuccess, set_name, set_name_sent event",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, expectData, spy1, spy2, spy3, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        options.lightPort = test_util_1.TestUtils.port;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        expectData = {\n                            action: \"set_name\",\n                            command: new models_1.Command(1, models_1.CommandType.SET_NAME, [\"unit_test\"]),\n                            result: { id: 1, result: [\"ok\"] },\n                            success: true,\n                        };\n                        spy1 = sinon_1.spy();\n                        spy2 = sinon_1.spy();\n                        spy3 = sinon_1.spy();\n                        y.once(\"set_name\", spy1);\n                        y.once(\"commandSuccess\", spy2);\n                        y.once(\"set_name_sent\", spy3);\n                        test_util_1.TestUtils.mockSocket({ id: 1, result: [\"ok\"] }, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"unit_test\"],\n                            });\n                        });\n                        return [4 /*yield*/, y.setName(\"unit_test\")];\n                    case 2:\n                        result = _a.sent();\n                        chai_1.expect(__assign({}, result)).to.deep.equal(expectData);\n                        sinon_1.assert.calledWith(spy1, expectData);\n                        sinon_1.assert.calledWith(spy2, expectData);\n                        sinon_1.assert.calledWith(spy3, expectData.command);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                  "err": {},
                  "uuid": "97137317-9a27-42fd-8d94-84627178d4d8",
                  "parentUUID": "c996733d-eea1-4a34-a94f-f9dd0c63d223",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setName() should fire error when send invalid name, should fire set_name, commandError, set_name_sent events",
                  "fullTitle": "Yeelight Class Test setName() tests setName() should fire error when send invalid name, should fire set_name, commandError, set_name_sent events",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, expectData1, spy1, spy2, spy3, result, errResult, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        options.lightPort = test_util_1.TestUtils.port;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        expectData1 = {\n                            action: \"set_name\",\n                            command: new models_1.Command(1, models_1.CommandType.SET_NAME, [\"this is invalid name\"]),\n                            result: { id: 1, error: { code: -1, message: \"General error\" } },\n                            success: false,\n                        };\n                        spy1 = sinon_1.spy();\n                        spy2 = sinon_1.spy();\n                        spy3 = sinon_1.spy();\n                        y.once(\"set_name\", spy1);\n                        y.once(\"commandError\", spy2);\n                        y.once(\"set_name_sent\", spy3);\n                        test_util_1.TestUtils.mockSocket({ id: 1, error: { code: -1, message: \"General error\" } }, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"this is invalid name\"],\n                            });\n                        });\n                        result = null;\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, y.setName(\"this is invalid name\")];\n                    case 3:\n                        result = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_1 = _a.sent();\n                        errResult = error_1;\n                        return [3 /*break*/, 5];\n                    case 5:\n                        chai_1.expect(result).to.be.equal(null);\n                        chai_1.expect(__assign({}, errResult)).to.deep.equal(expectData1);\n                        sinon_1.assert.calledWith(spy1, expectData1);\n                        sinon_1.assert.calledWith(spy2, expectData1);\n                        sinon_1.assert.calledWith(spy3, expectData1.command);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                  "err": {},
                  "uuid": "967e41f0-c9cf-4efc-9dba-47f1f9be8b38",
                  "parentUUID": "c996733d-eea1-4a34-a94f-f9dd0c63d223",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setName() should reject promise, raise commandTimedout event when socket not response",
                  "fullTitle": "Yeelight Class Test setName() tests setName() should reject promise, raise commandTimedout event when socket not response",
                  "timedOut": false,
                  "duration": 2002,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, expectData, spy2, spy3, result, err_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        options.lightPort = test_util_1.TestUtils.port;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        expectData = {\n                            action: \"set_name\",\n                            command: new models_1.Command(1, models_1.CommandType.SET_NAME, [\"mybulb\"]),\n                            success: false,\n                        };\n                        spy2 = sinon_1.spy();\n                        spy3 = sinon_1.spy();\n                        y.once(\"commandTimedout\", spy2);\n                        y.once(\"set_name_sent\", spy3);\n                        test_util_1.TestUtils.mockSocket(null, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"mybulb\"],\n                            });\n                        });\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, y.setName(\"mybulb\")];\n                    case 3:\n                        result = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_1 = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 5:\n                        sinon_1.assert.calledWith(spy2, expectData.command);\n                        sinon_1.assert.calledWith(spy3, expectData.command);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                  "err": {},
                  "uuid": "6c25f6a2-11d5-4ac4-a029-84f86c3af103",
                  "parentUUID": "c996733d-eea1-4a34-a94f-f9dd0c63d223",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3e995e3e-3555-4fa3-8d57-908e527559c8",
                "97137317-9a27-42fd-8d94-84627178d4d8",
                "967e41f0-c9cf-4efc-9dba-47f1f9be8b38",
                "6c25f6a2-11d5-4ac4-a029-84f86c3af103"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2010,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "f3e01338-b39f-48a8-89c0-802989ea9a00",
              "title": "manipulator methods",
              "fullFile": "/home/runner/work/yeelight/yeelight/test/yeelight.test.ts",
              "file": "/test/yeelight.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "method toggle should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method toggle should work when send valid message",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "6438f0be-8e14-463c-81d4-2e3a1c3367d6",
                  "parentUUID": "f3e01338-b39f-48a8-89c0-802989ea9a00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method cronAdd should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method cronAdd should work when send valid message",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "019e94be-28fc-4a04-a60c-efadf8f33cbe",
                  "parentUUID": "f3e01338-b39f-48a8-89c0-802989ea9a00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method cronGet should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method cronGet should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "2ebf42f9-a408-4a38-8540-f60d32cd35b5",
                  "parentUUID": "f3e01338-b39f-48a8-89c0-802989ea9a00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method cronDelete should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method cronDelete should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "c68344f0-9e4c-4314-913a-4037582328c8",
                  "parentUUID": "f3e01338-b39f-48a8-89c0-802989ea9a00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setDefault should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setDefault should work when send valid message",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "19be29f3-be57-486e-a00b-b1fb7ee8192a",
                  "parentUUID": "f3e01338-b39f-48a8-89c0-802989ea9a00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method startColorFlow should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method startColorFlow should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "efe52772-dda3-4deb-ab60-98e79ea486bf",
                  "parentUUID": "f3e01338-b39f-48a8-89c0-802989ea9a00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method stopColorFlow should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method stopColorFlow should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "f13b8126-c796-4782-90a1-b2a44fd56598",
                  "parentUUID": "f3e01338-b39f-48a8-89c0-802989ea9a00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method getProperty should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method getProperty should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "46a59eb1-3499-419c-a99c-5523f4286994",
                  "parentUUID": "f3e01338-b39f-48a8-89c0-802989ea9a00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setCtAbx should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setCtAbx should work when send valid message",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "673ef9af-6158-43f0-83e8-3db9f2b56b56",
                  "parentUUID": "f3e01338-b39f-48a8-89c0-802989ea9a00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setRGB should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setRGB should work when send valid message",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "e8624a08-ecb2-405c-85df-d57c634b1888",
                  "parentUUID": "f3e01338-b39f-48a8-89c0-802989ea9a00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setHSV should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setHSV should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "63a47ba9-3cae-4603-b96b-d33fe30f8420",
                  "parentUUID": "f3e01338-b39f-48a8-89c0-802989ea9a00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setBright should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setBright should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "92ee7619-be0f-44d5-a344-806c67ff29e8",
                  "parentUUID": "f3e01338-b39f-48a8-89c0-802989ea9a00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setAdjust should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setAdjust should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "f69ff90c-ff5d-4e9f-a7f1-fb82a6761a53",
                  "parentUUID": "f3e01338-b39f-48a8-89c0-802989ea9a00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setName should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setName should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "187095f2-f3c6-463f-bd5a-262657666e01",
                  "parentUUID": "f3e01338-b39f-48a8-89c0-802989ea9a00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method adjust should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method adjust should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "6ff91cbd-f3da-45e0-86de-30fb99030a0b",
                  "parentUUID": "f3e01338-b39f-48a8-89c0-802989ea9a00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method ping should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method ping should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "25748afc-a270-4a26-a1e9-ebb5563c039c",
                  "parentUUID": "f3e01338-b39f-48a8-89c0-802989ea9a00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setScene should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setScene should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "1ec3efb5-54ef-4599-b58c-19707315f4f5",
                  "parentUUID": "f3e01338-b39f-48a8-89c0-802989ea9a00",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6438f0be-8e14-463c-81d4-2e3a1c3367d6",
                "019e94be-28fc-4a04-a60c-efadf8f33cbe",
                "2ebf42f9-a408-4a38-8540-f60d32cd35b5",
                "c68344f0-9e4c-4314-913a-4037582328c8",
                "19be29f3-be57-486e-a00b-b1fb7ee8192a",
                "efe52772-dda3-4deb-ab60-98e79ea486bf",
                "f13b8126-c796-4782-90a1-b2a44fd56598",
                "46a59eb1-3499-419c-a99c-5523f4286994",
                "673ef9af-6158-43f0-83e8-3db9f2b56b56",
                "e8624a08-ecb2-405c-85df-d57c634b1888",
                "63a47ba9-3cae-4603-b96b-d33fe30f8420",
                "92ee7619-be0f-44d5-a344-806c67ff29e8",
                "f69ff90c-ff5d-4e9f-a7f1-fb82a6761a53",
                "187095f2-f3c6-463f-bd5a-262657666e01",
                "6ff91cbd-f3da-45e0-86de-30fb99030a0b",
                "25748afc-a270-4a26-a1e9-ebb5563c039c",
                "1ec3efb5-54ef-4599-b58c-19707315f4f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 23,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [
            "3f63c8d3-7a51-47f9-9e8d-569f61405d25"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}