{
  "stats": {
    "suites": 7,
    "tests": 42,
    "passes": 42,
    "pending": 0,
    "failures": 0,
    "start": "2021-06-27T11:59:52.658Z",
    "end": "2021-06-27T11:59:54.937Z",
    "duration": 2279,
    "testsRegistered": 42,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "72ca15c5-3d92-4646-92b3-cb81ea9677ee",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "16eccfcd-ff88-4bcf-9c61-fd1a34eb32ab",
          "title": "Color Test",
          "fullFile": "/home/runner/work/yeelight/yeelight/test/color.test.ts",
          "file": "/test/color.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "new Color(\"string\") should conver hex string to color object",
              "fullTitle": "Color Test new Color(\"string\") should conver hex string to color object",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var color = new color_1.Color(0, 0, 0, \"FFFFFF\");\nchai_1.expect(__assign({}, color)).deep.eq({\n    blue: 255,\n    color: \"FFFFFF\",\n    green: 255,\n    red: 255,\n});",
              "err": {},
              "uuid": "59adb799-8e73-42c0-b6ee-b384689089f5",
              "parentUUID": "16eccfcd-ff88-4bcf-9c61-fd1a34eb32ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "new Color(123, 44, 55) should give the color number : 0x7B2C37",
              "fullTitle": "Color Test new Color(123, 44, 55) should give the color number : 0x7B2C37",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var color = new color_1.Color(123, 44, 55);\nvar numberValue = color.getValue();\nchai_1.expect(numberValue).deep.eq(0x7B2C37);",
              "err": {},
              "uuid": "49990f9c-9276-4459-a1f4-d74f61af8fcf",
              "parentUUID": "16eccfcd-ff88-4bcf-9c61-fd1a34eb32ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "new Color(255, 255, 255) should give the color number : 0xFFFFFF",
              "fullTitle": "Color Test new Color(255, 255, 255) should give the color number : 0xFFFFFF",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var color = new color_1.Color(255, 255, 255);\nvar numberValue = color.getValue();\nchai_1.expect(numberValue).deep.eq(0xFFFFFF);",
              "err": {},
              "uuid": "31f6c5a3-eb4d-42df-9d77-67c8dd690194",
              "parentUUID": "16eccfcd-ff88-4bcf-9c61-fd1a34eb32ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "new Color(0, 0, 0, \"1ac3ef\") should give the color number : 1754095",
              "fullTitle": "Color Test new Color(0, 0, 0, \"1ac3ef\") should give the color number : 1754095",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var color = new color_1.Color(0, 0, 0, \"1ac3ef\");\nchai_1.expect(__assign({}, color)).deep.eq({\n    blue: 239,\n    color: \"1AC3EF\",\n    green: 195,\n    red: 26,\n});",
              "err": {},
              "uuid": "fcef934c-97ce-4f4c-a34a-76b3d91cc55f",
              "parentUUID": "16eccfcd-ff88-4bcf-9c61-fd1a34eb32ab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "59adb799-8e73-42c0-b6ee-b384689089f5",
            "49990f9c-9276-4459-a1f4-d74f61af8fcf",
            "31f6c5a3-eb4d-42df-9d77-67c8dd690194",
            "fcef934c-97ce-4f4c-a34a-76b3d91cc55f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "ac66f48a-9aff-4de9-aa0b-7961ff22490e",
          "title": "Discover Class Test",
          "fullFile": "/home/runner/work/yeelight/yeelight/test/discover.test.ts",
          "file": "/test/discover.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Discover Class Test\"",
              "fullTitle": "Discover Class Test \"before each\" hook in \"Discover Class Test\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var me = TestUtils;\nserver = net_1.createServer(function (s) {\n    socket = s;\n    socket.on(\"data\", function (incomming) {\n        validateFunc(JSON.parse(incomming.toString()));\n        if (data) {\n            socket.write(JSON.stringify(data));\n        }\n    });\n    // socket.pipe(socket);\n});\nserver.on(\"connection\", function (s) { return socket = s; });\n// console.log(\"this.port\", me.port);\nserver.listen(me.port, \"127.0.0.1\", done);\n//done();",
              "err": {},
              "uuid": "1a795bed-aa7b-4275-80a0-36aba4c9daf1",
              "parentUUID": "ac66f48a-9aff-4de9-aa0b-7961ff22490e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Discover Class Test\"",
              "fullTitle": "Discover Class Test \"after each\" hook in \"Discover Class Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// TestUtils.port++;\nif (socket) {\n    socket.removeAllListeners();\n    socket.end();\n    socket.destroy();\n}\nif (server) {\n    server.removeAllListeners();\n    server.close(done);\n}\nelse {\n    done();\n}",
              "err": {},
              "uuid": "a99981e0-724a-4d96-9232-03d88d267fa0",
              "parentUUID": "ac66f48a-9aff-4de9-aa0b-7961ff22490e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "discover() should find bulbs",
              "fullTitle": "Discover Class Test discover() should find bulbs",
              "timedOut": false,
              "duration": 204,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var discover, devices;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    discover = new discover_1.Discover({\n                        limit: 1,\n                        timeout: 1000,\n                    });\n                    setTimeout(function () {\n                        // Mock message received:\n                        var message = \"HTTP/1.1 200 OK\\r\\n\\\nCache-Control: max-age=3584\\r\\n\\\nDate:\\r\\n\\\nExt:\\r\\n\\\nLocation: yeelight://192.168.0.42:55443\\r\\n\\\nServer: POSIX UPnP/1.0 YGLC/1\\r\\n\\\nid: 0x000000000af2608f\\r\\n\\\nmodel: color\\r\\n\\\nfw_ver: 26\\r\\n\\\nsupport: get_prop set_default set_power toggle set_bright start_cf \\r\\n\\\nstop_cf set_scene cron_add cron_get cron_del set_ct_abx set_rgb set_hsv \\r\\n\\\nset_adjust adjust_bright adjust_ct adjust_color set_music set\\r\\n\\\npower: on\\r\\n\\\nbright: 1\\r\\n\\\ncolor_mode: 1\\r\\n\\\nct: 2234\\r\\n\\\nrgb: 65280\\r\\n\\\nhue: 240\\r\\n\\\nsat: 100\\r\\n\\\nname: new_name\";\n                        // @ts-ignore private\n                        discover.onSocketMessage(Buffer.from(message), {\n                            address: \"192.168.0.42\",\n                            family: \"IPv4\",\n                            port: 49155,\n                            // size: message.length\n                        });\n                    }, 100);\n                    return [4 /*yield*/, discover.start()];\n                case 1:\n                    devices = _a.sent();\n                    chai_1.expect(devices.length).to.eq(1);\n                    chai_1.expect(devices[0].id).to.eq(\"0x000000000af2608f\");\n                    chai_1.expect(devices[0].host).to.eq(\"192.168.0.42\");\n                    chai_1.expect(devices[0].port).to.eq(55443);\n                    discover.destroy();\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "b028f369-ba03-4d59-81f4-80f1685739ac",
              "parentUUID": "ac66f48a-9aff-4de9-aa0b-7961ff22490e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b028f369-ba03-4d59-81f4-80f1685739ac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 204,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "3c1e0786-6431-48c6-bf09-3a9731550dee",
          "title": "Util Test",
          "fullFile": "/home/runner/work/yeelight/yeelight/test/util.test.ts",
          "file": "/test/util.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "parseDeviceInfo() should successful parse valid message",
              "fullTitle": "Util Test parseDeviceInfo() should successful parse valid message",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var message = fs.readFileSync(path.join(__dirname, \"./data/valid-message.txt\"), \"utf8\");\nvar device = utils_1.Utils.parseDeviceInfo(message);\nvar outputExpected = require(\"./data/valid-device.json\");\nchai_1.expect(device).not.eq(null);\nchai_1.expect(device).deep.eq(outputExpected);",
              "err": {},
              "uuid": "b118a12b-26ee-45b3-b5f6-2f6e44170800",
              "parentUUID": "3c1e0786-6431-48c6-bf09-3a9731550dee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getListIpAddress should get the arround ip address first",
              "fullTitle": "Util Test getListIpAddress should get the arround ip address first",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var ip = \"192.168.1.5\";\nvar output = utils_1.Utils.getListIpAddress(ip, 1, 10);\nchai_1.expect(output).to.deep.eq([\n    \"192.168.1.4\",\n    \"192.168.1.6\",\n    \"192.168.1.3\",\n    \"192.168.1.7\",\n    \"192.168.1.2\",\n    \"192.168.1.8\",\n    \"192.168.1.1\",\n    \"192.168.1.9\",\n    \"192.168.1.10\",\n]);",
              "err": {},
              "uuid": "785b9893-f90a-4e92-8297-ff42c6c7fb32",
              "parentUUID": "3c1e0786-6431-48c6-bf09-3a9731550dee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "47bec799-3400-4209-b7ab-727d52bd8347",
              "title": "hexToNumber() test",
              "fullFile": "/home/runner/work/yeelight/yeelight/test/util.test.ts",
              "file": "/test/util.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "numberToHex(1) should equal to 1",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(1) should equal to 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "443d3be9-f01c-4645-b15e-6bce02873036",
                  "parentUUID": "47bec799-3400-4209-b7ab-727d52bd8347",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(10) should equal to 16",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(10) should equal to 16",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "8492e86a-2067-4b1d-aff0-6eae99a2478b",
                  "parentUUID": "47bec799-3400-4209-b7ab-727d52bd8347",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(14) should equal to 20",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(14) should equal to 20",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "39ee500c-3596-4d16-b5aa-353c13fe6d05",
                  "parentUUID": "47bec799-3400-4209-b7ab-727d52bd8347",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(44) should equal to 68",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(44) should equal to 68",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "07e2fc49-2f58-4ff9-af98-9dc5fd45ae9c",
                  "parentUUID": "47bec799-3400-4209-b7ab-727d52bd8347",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(A) should equal to 10",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(A) should equal to 10",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "8b21f4f7-8a5a-48c5-a573-b776a5d79ef5",
                  "parentUUID": "47bec799-3400-4209-b7ab-727d52bd8347",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(F) should equal to 15",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(F) should equal to 15",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "67eea7c0-26f7-4077-92ac-302b4d4ebba6",
                  "parentUUID": "47bec799-3400-4209-b7ab-727d52bd8347",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(1A) should equal to 26",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(1A) should equal to 26",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "d78cc408-7914-42c4-891f-ebdd3cd1bc82",
                  "parentUUID": "47bec799-3400-4209-b7ab-727d52bd8347",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(FF) should equal to 255",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(FF) should equal to 255",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "673f6f3e-1d89-41be-9462-d40affeeb8be",
                  "parentUUID": "47bec799-3400-4209-b7ab-727d52bd8347",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(AB) should equal to 171",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(AB) should equal to 171",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "1bf42532-e036-4a9e-a42d-0889aad71ebb",
                  "parentUUID": "47bec799-3400-4209-b7ab-727d52bd8347",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(A123BE) should equal to 10560446",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(A123BE) should equal to 10560446",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "d8798dc2-8a1a-4004-ac24-94e7d7788f6d",
                  "parentUUID": "47bec799-3400-4209-b7ab-727d52bd8347",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(1234567890ABCDEF) should equal to 1311768467294899700",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(1234567890ABCDEF) should equal to 1311768467294899700",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "d10ce3cb-34cc-4472-8ee4-2303d6a95b4b",
                  "parentUUID": "47bec799-3400-4209-b7ab-727d52bd8347",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(ABCFED) should equal to 11259885",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(ABCFED) should equal to 11259885",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "b6871843-f5fb-4407-8210-1d1c9f62ec57",
                  "parentUUID": "47bec799-3400-4209-b7ab-727d52bd8347",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "numberToHex(abccde) should equal to 11259102",
                  "fullTitle": "Util Test hexToNumber() test numberToHex(abccde) should equal to 11259102",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                  "err": {},
                  "uuid": "c9d2c4ff-743e-4649-a98c-2369ef093a15",
                  "parentUUID": "47bec799-3400-4209-b7ab-727d52bd8347",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "443d3be9-f01c-4645-b15e-6bce02873036",
                "8492e86a-2067-4b1d-aff0-6eae99a2478b",
                "39ee500c-3596-4d16-b5aa-353c13fe6d05",
                "07e2fc49-2f58-4ff9-af98-9dc5fd45ae9c",
                "8b21f4f7-8a5a-48c5-a573-b776a5d79ef5",
                "67eea7c0-26f7-4077-92ac-302b4d4ebba6",
                "d78cc408-7914-42c4-891f-ebdd3cd1bc82",
                "673f6f3e-1d89-41be-9462-d40affeeb8be",
                "1bf42532-e036-4a9e-a42d-0889aad71ebb",
                "d8798dc2-8a1a-4004-ac24-94e7d7788f6d",
                "d10ce3cb-34cc-4472-8ee4-2303d6a95b4b",
                "b6871843-f5fb-4407-8210-1d1c9f62ec57",
                "c9d2c4ff-743e-4649-a98c-2369ef093a15"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [
            "b118a12b-26ee-45b3-b5f6-2f6e44170800",
            "785b9893-f90a-4e92-8297-ff42c6c7fb32"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "338e67f2-fa55-4996-92ad-41c743b19df2",
          "title": "Yeelight Class Test",
          "fullFile": "/home/runner/work/yeelight/yeelight/test/yeelight.test.ts",
          "file": "/test/yeelight.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Yeelight Class Test\"",
              "fullTitle": "Yeelight Class Test \"before each\" hook in \"Yeelight Class Test\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var me = TestUtils;\nserver = net_1.createServer(function (s) {\n    socket = s;\n    socket.on(\"data\", function (incomming) {\n        validateFunc(JSON.parse(incomming.toString()));\n        if (data) {\n            socket.write(JSON.stringify(data));\n        }\n    });\n    // socket.pipe(socket);\n});\nserver.on(\"connection\", function (s) { return socket = s; });\n// console.log(\"this.port\", me.port);\nserver.listen(me.port, \"127.0.0.1\", done);\n//done();",
              "err": {},
              "uuid": "3320bca5-97ef-44f6-9913-a0898cfd2df2",
              "parentUUID": "338e67f2-fa55-4996-92ad-41c743b19df2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Yeelight Class Test\"",
              "fullTitle": "Yeelight Class Test \"after each\" hook in \"Yeelight Class Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// TestUtils.port++;\nif (socket) {\n    socket.removeAllListeners();\n    socket.end();\n    socket.destroy();\n}\nif (server) {\n    server.removeAllListeners();\n    server.close(done);\n}\nelse {\n    done();\n}",
              "err": {},
              "uuid": "635ccbd6-85c3-4468-8ff1-8bb1488948f4",
              "parentUUID": "338e67f2-fa55-4996-92ad-41c743b19df2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "connect() should success",
              "fullTitle": "Yeelight Class Test connect() should success",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var yeelight, y;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    yeelight = new yeelight_1.Yeelight(options);\n                    return [4 /*yield*/, yeelight.connect()];\n                case 1:\n                    y = _a.sent();\n                    chai_1.expect(y).not.eq(null);\n                    chai_1.expect(y.connected).to.eq(true);\n                    y.disconnect();\n                    return [2 /*return*/];\n            }\n        });\n    });",
              "err": {},
              "uuid": "5b316879-c58a-474b-8c0a-7ef9ab25f967",
              "parentUUID": "338e67f2-fa55-4996-92ad-41c743b19df2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "9da58aa7-99a0-4824-acc1-8544248fbfea",
              "title": "setName() tests",
              "fullFile": "/home/runner/work/yeelight/yeelight/test/yeelight.test.ts",
              "file": "/test/yeelight.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setName() should work when send valid message",
                  "fullTitle": "Yeelight Class Test setName() tests setName() should work when send valid message",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options.lightPort = test_util_1.TestUtils.port;\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        test_util_1.TestUtils.mockSocket({ id: 1, result: [\"ok\"] }, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"unit_test\"],\n                            });\n                        });\n                        return [4 /*yield*/, y.setName(\"unit_test\")];\n                    case 2:\n                        result = _a.sent();\n                        chai_1.expect(result).to.not.eq(null);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                  "err": {},
                  "uuid": "6c7cca33-e563-4f34-9d77-72ac3d157790",
                  "parentUUID": "9da58aa7-99a0-4824-acc1-8544248fbfea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setName() should fire commandSuccess, set_name, set_name_sent event",
                  "fullTitle": "Yeelight Class Test setName() tests setName() should fire commandSuccess, set_name, set_name_sent event",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, expectData, spy1, spy2, spy3, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        options.lightPort = test_util_1.TestUtils.port;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        expectData = {\n                            action: \"set_name\",\n                            command: new models_1.Command(1, models_1.CommandType.SET_NAME, [\"unit_test\"]),\n                            result: { id: 1, result: [\"ok\"] },\n                            success: true,\n                        };\n                        spy1 = sinon_1.spy();\n                        spy2 = sinon_1.spy();\n                        spy3 = sinon_1.spy();\n                        y.once(\"set_name\", spy1);\n                        y.once(\"commandSuccess\", spy2);\n                        y.once(\"set_name_sent\", spy3);\n                        test_util_1.TestUtils.mockSocket({ id: 1, result: [\"ok\"] }, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"unit_test\"],\n                            });\n                        });\n                        return [4 /*yield*/, y.setName(\"unit_test\")];\n                    case 2:\n                        result = _a.sent();\n                        chai_1.expect(__assign({}, result)).to.deep.equal(expectData);\n                        sinon_1.assert.calledWith(spy1, expectData);\n                        sinon_1.assert.calledWith(spy2, expectData);\n                        sinon_1.assert.calledWith(spy3, expectData.command);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                  "err": {},
                  "uuid": "5c4312fb-6160-443f-9730-f9c8a0ef14be",
                  "parentUUID": "9da58aa7-99a0-4824-acc1-8544248fbfea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setName() should fire error when send invalid name, should fire set_name, commandError, set_name_sent events",
                  "fullTitle": "Yeelight Class Test setName() tests setName() should fire error when send invalid name, should fire set_name, commandError, set_name_sent events",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, expectData1, spy1, spy2, spy3, result, errResult, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        options.lightPort = test_util_1.TestUtils.port;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        expectData1 = {\n                            action: \"set_name\",\n                            command: new models_1.Command(1, models_1.CommandType.SET_NAME, [\"this is invalid name\"]),\n                            result: { id: 1, error: { code: -1, message: \"General error\" } },\n                            success: false,\n                        };\n                        spy1 = sinon_1.spy();\n                        spy2 = sinon_1.spy();\n                        spy3 = sinon_1.spy();\n                        y.once(\"set_name\", spy1);\n                        y.once(\"commandError\", spy2);\n                        y.once(\"set_name_sent\", spy3);\n                        test_util_1.TestUtils.mockSocket({ id: 1, error: { code: -1, message: \"General error\" } }, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"this is invalid name\"],\n                            });\n                        });\n                        result = null;\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, y.setName(\"this is invalid name\")];\n                    case 3:\n                        result = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_1 = _a.sent();\n                        errResult = error_1;\n                        return [3 /*break*/, 5];\n                    case 5:\n                        chai_1.expect(result).to.be.equal(null);\n                        chai_1.expect(__assign({}, errResult)).to.deep.equal(expectData1);\n                        sinon_1.assert.calledWith(spy1, expectData1);\n                        sinon_1.assert.calledWith(spy2, expectData1);\n                        sinon_1.assert.calledWith(spy3, expectData1.command);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                  "err": {},
                  "uuid": "8f64d327-61ce-457f-abd8-0b8f7a1cb41d",
                  "parentUUID": "9da58aa7-99a0-4824-acc1-8544248fbfea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setName() should reject promise, raise commandTimedout event when socket not response",
                  "fullTitle": "Yeelight Class Test setName() tests setName() should reject promise, raise commandTimedout event when socket not response",
                  "timedOut": false,
                  "duration": 2003,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, expectData, spy2, spy3, result, err_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        options.lightPort = test_util_1.TestUtils.port;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        expectData = {\n                            action: \"set_name\",\n                            command: new models_1.Command(1, models_1.CommandType.SET_NAME, [\"mybulb\"]),\n                            success: false,\n                        };\n                        spy2 = sinon_1.spy();\n                        spy3 = sinon_1.spy();\n                        y.once(\"commandTimedout\", spy2);\n                        y.once(\"set_name_sent\", spy3);\n                        test_util_1.TestUtils.mockSocket(null, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"mybulb\"],\n                            });\n                        });\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, y.setName(\"mybulb\")];\n                    case 3:\n                        result = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_1 = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 5:\n                        sinon_1.assert.calledWith(spy2, expectData.command);\n                        sinon_1.assert.calledWith(spy3, expectData.command);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                  "err": {},
                  "uuid": "06def0e1-08ce-4a94-87f8-6802fc137c02",
                  "parentUUID": "9da58aa7-99a0-4824-acc1-8544248fbfea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c7cca33-e563-4f34-9d77-72ac3d157790",
                "5c4312fb-6160-443f-9730-f9c8a0ef14be",
                "8f64d327-61ce-457f-abd8-0b8f7a1cb41d",
                "06def0e1-08ce-4a94-87f8-6802fc137c02"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2011,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "19cfc9a4-aba6-498e-b00c-231be4207b29",
              "title": "manipulator methods",
              "fullFile": "/home/runner/work/yeelight/yeelight/test/yeelight.test.ts",
              "file": "/test/yeelight.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "method toggle should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method toggle should work when send valid message",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "2c395573-97cc-4fa6-a7ca-7f5d8342e8e9",
                  "parentUUID": "19cfc9a4-aba6-498e-b00c-231be4207b29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method cronAdd should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method cronAdd should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "e7ef26f7-6d1a-427d-bc6a-f328e41c1bf6",
                  "parentUUID": "19cfc9a4-aba6-498e-b00c-231be4207b29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method cronGet should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method cronGet should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "a594ff8e-6f0c-4826-b008-07e46717f94d",
                  "parentUUID": "19cfc9a4-aba6-498e-b00c-231be4207b29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method cronDelete should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method cronDelete should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "f52369d7-f6bf-4c5a-86a0-35c1d43abab1",
                  "parentUUID": "19cfc9a4-aba6-498e-b00c-231be4207b29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setDefault should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setDefault should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "b28eabde-0997-4426-bf1c-b869851f91dd",
                  "parentUUID": "19cfc9a4-aba6-498e-b00c-231be4207b29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method startColorFlow should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method startColorFlow should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "2399b225-5e4f-4224-aaa3-f1d4b70143bb",
                  "parentUUID": "19cfc9a4-aba6-498e-b00c-231be4207b29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method stopColorFlow should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method stopColorFlow should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "0e46ffb4-55a7-4a40-9358-8e071e93c950",
                  "parentUUID": "19cfc9a4-aba6-498e-b00c-231be4207b29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method getProperty should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method getProperty should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "31b8e63e-c061-49dd-a4b9-d6ff70a514b6",
                  "parentUUID": "19cfc9a4-aba6-498e-b00c-231be4207b29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setCtAbx should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setCtAbx should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "d2578347-532e-4b6b-8f53-a27f02dec74a",
                  "parentUUID": "19cfc9a4-aba6-498e-b00c-231be4207b29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setRGB should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setRGB should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "6e4d6602-bad7-4d3d-844d-f28de520c3d8",
                  "parentUUID": "19cfc9a4-aba6-498e-b00c-231be4207b29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setHSV should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setHSV should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "3915a0dc-ad13-4ab0-9564-41e1fd23af81",
                  "parentUUID": "19cfc9a4-aba6-498e-b00c-231be4207b29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setBright should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setBright should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "7576a888-4bad-4a6b-aaab-0ae2b454ac8c",
                  "parentUUID": "19cfc9a4-aba6-498e-b00c-231be4207b29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setAdjust should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setAdjust should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "47cb6fef-aec0-4b49-b57f-7841227c9a2f",
                  "parentUUID": "19cfc9a4-aba6-498e-b00c-231be4207b29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setName should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setName should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "a57048c9-75cd-4dd0-a934-3a36d6bdd7f6",
                  "parentUUID": "19cfc9a4-aba6-498e-b00c-231be4207b29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method adjust should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method adjust should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "e26fe023-43c6-412d-8976-1be3786f0ddf",
                  "parentUUID": "19cfc9a4-aba6-498e-b00c-231be4207b29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method ping should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method ping should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "52078ad2-cc3b-43a2-9999-0a8fedf1edfa",
                  "parentUUID": "19cfc9a4-aba6-498e-b00c-231be4207b29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "method setScene should work when send valid message",
                  "fullTitle": "Yeelight Class Test manipulator methods method setScene should work when send valid message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                  "err": {},
                  "uuid": "4c80ad58-ddff-428c-b141-b85cdf3e57fd",
                  "parentUUID": "19cfc9a4-aba6-498e-b00c-231be4207b29",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2c395573-97cc-4fa6-a7ca-7f5d8342e8e9",
                "e7ef26f7-6d1a-427d-bc6a-f328e41c1bf6",
                "a594ff8e-6f0c-4826-b008-07e46717f94d",
                "f52369d7-f6bf-4c5a-86a0-35c1d43abab1",
                "b28eabde-0997-4426-bf1c-b869851f91dd",
                "2399b225-5e4f-4224-aaa3-f1d4b70143bb",
                "0e46ffb4-55a7-4a40-9358-8e071e93c950",
                "31b8e63e-c061-49dd-a4b9-d6ff70a514b6",
                "d2578347-532e-4b6b-8f53-a27f02dec74a",
                "6e4d6602-bad7-4d3d-844d-f28de520c3d8",
                "3915a0dc-ad13-4ab0-9564-41e1fd23af81",
                "7576a888-4bad-4a6b-aaab-0ae2b454ac8c",
                "47cb6fef-aec0-4b49-b57f-7841227c9a2f",
                "a57048c9-75cd-4dd0-a934-3a36d6bdd7f6",
                "e26fe023-43c6-412d-8976-1be3786f0ddf",
                "52078ad2-cc3b-43a2-9999-0a8fedf1edfa",
                "4c80ad58-ddff-428c-b141-b85cdf3e57fd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [
            "5b316879-c58a-474b-8c0a-7ef9ab25f967"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}