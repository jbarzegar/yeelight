{
  "stats": {
    "suites": 7,
    "tests": 42,
    "passes": 42,
    "pending": 0,
    "failures": 0,
    "start": "2021-02-21T10:20:47.440Z",
    "end": "2021-02-21T10:20:49.774Z",
    "duration": 2334,
    "testsRegistered": 42,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "9012f074-6cb4-4cc7-a86b-be5346c035e1",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "66a47e7c-fc27-4bf9-ab5b-f0aeccd7a7ef",
        "title": "Color Test",
        "fullFile": "/home/travis/build/samuraitruong/yeelight/test/color.test.ts",
        "file": "/test/color.test.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "new Color(\"string\") should conver hex string to color object",
            "fullTitle": "Color Test new Color(\"string\") should conver hex string to color object",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var color = new color_1.Color(0, 0, 0, \"FFFFFF\");\nchai_1.expect(__assign({}, color)).deep.eq({\n    blue: 255,\n    color: \"FFFFFF\",\n    green: 255,\n    red: 255,\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7ed2bdaf-3f15-4e00-b1d3-3b54d9c28e98",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "new Color(123, 44, 55) should give the color number : 0x7B2C37",
            "fullTitle": "Color Test new Color(123, 44, 55) should give the color number : 0x7B2C37",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var color = new color_1.Color(123, 44, 55);\nvar numberValue = color.getValue();\nchai_1.expect(numberValue).deep.eq(0x7B2C37);",
            "err": {},
            "isRoot": false,
            "uuid": "d59edbf5-2d0c-4f57-b2dc-a7fdf1422235",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "new Color(255, 255, 255) should give the color number : 0xFFFFFF",
            "fullTitle": "Color Test new Color(255, 255, 255) should give the color number : 0xFFFFFF",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var color = new color_1.Color(255, 255, 255);\nvar numberValue = color.getValue();\nchai_1.expect(numberValue).deep.eq(0xFFFFFF);",
            "err": {},
            "isRoot": false,
            "uuid": "03a5921d-4df0-41da-a0e8-276fd2ce8439",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "new Color(0, 0, 0, \"1ac3ef\") should give the color number : 1754095",
            "fullTitle": "Color Test new Color(0, 0, 0, \"1ac3ef\") should give the color number : 1754095",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var color = new color_1.Color(0, 0, 0, \"1ac3ef\");\nchai_1.expect(__assign({}, color)).deep.eq({\n    blue: 239,\n    color: \"1AC3EF\",\n    green: 195,\n    red: 26,\n});",
            "err": {},
            "isRoot": false,
            "uuid": "51a5e801-bebf-4d17-897e-b9dd7365221b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "7ed2bdaf-3f15-4e00-b1d3-3b54d9c28e98",
          "d59edbf5-2d0c-4f57-b2dc-a7fdf1422235",
          "03a5921d-4df0-41da-a0e8-276fd2ce8439",
          "51a5e801-bebf-4d17-897e-b9dd7365221b"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      },
      {
        "uuid": "6ff9fbcc-b9e2-4d1f-89c7-529362f6599f",
        "title": "Discover Class Test",
        "fullFile": "/home/travis/build/samuraitruong/yeelight/test/discover.test.ts",
        "file": "/test/discover.test.ts",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Discover Class Test \"before each\" hook",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var me = TestUtils;\nserver = net_1.createServer(function (s) {\n    socket = s;\n    socket.on(\"data\", function (incomming) {\n        validateFunc(JSON.parse(incomming.toString()));\n        if (data) {\n            socket.write(JSON.stringify(data));\n        }\n    });\n    // socket.pipe(socket);\n});\nserver.on(\"connection\", function (s) { return socket = s; });\n// console.log(\"this.port\", me.port);\nserver.listen(me.port, \"127.0.0.1\", done);\n//done();",
            "err": {},
            "isRoot": false,
            "uuid": "4f730561-00f3-4024-aecc-4f2ca7311a2e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "Discover Class Test \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "// TestUtils.port++;\nif (socket) {\n    socket.removeAllListeners();\n    socket.end();\n    socket.destroy();\n}\nif (server) {\n    server.removeAllListeners();\n    server.close(done);\n}\nelse {\n    done();\n}",
            "err": {},
            "isRoot": false,
            "uuid": "0d92b1c7-86e1-4637-9fc9-c7ad7d3bb721",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "discover() should find bulbs",
            "fullTitle": "Discover Class Test discover() should find bulbs",
            "timedOut": false,
            "duration": 209,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return __awaiter(_this, void 0, void 0, function () {\n        var discover, devices;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    discover = new discover_1.Discover({\n                        limit: 1,\n                        timeout: 1000,\n                    });\n                    setTimeout(function () {\n                        // Mock message received:\n                        var message = \"HTTP/1.1 200 OK\\r\\n\\\nCache-Control: max-age=3584\\r\\n\\\nDate:\\r\\n\\\nExt:\\r\\n\\\nLocation: yeelight://192.168.0.42:55443\\r\\n\\\nServer: POSIX UPnP/1.0 YGLC/1\\r\\n\\\nid: 0x000000000af2608f\\r\\n\\\nmodel: color\\r\\n\\\nfw_ver: 26\\r\\n\\\nsupport: get_prop set_default set_power toggle set_bright start_cf \\r\\n\\\nstop_cf set_scene cron_add cron_get cron_del set_ct_abx set_rgb set_hsv \\r\\n\\\nset_adjust adjust_bright adjust_ct adjust_color set_music set\\r\\n\\\npower: on\\r\\n\\\nbright: 1\\r\\n\\\ncolor_mode: 1\\r\\n\\\nct: 2234\\r\\n\\\nrgb: 65280\\r\\n\\\nhue: 240\\r\\n\\\nsat: 100\\r\\n\\\nname: new_name\";\n                        // @ts-ignore private\n                        discover.onSocketMessage(Buffer.from(message), {\n                            address: \"192.168.0.42\",\n                            family: \"IPv4\",\n                            port: 49155,\n                        });\n                    }, 100);\n                    return [4 /*yield*/, discover.start()];\n                case 1:\n                    devices = _a.sent();\n                    chai_1.expect(devices.length).to.eq(1);\n                    chai_1.expect(devices[0].id).to.eq(\"0x000000000af2608f\");\n                    chai_1.expect(devices[0].host).to.eq(\"192.168.0.42\");\n                    chai_1.expect(devices[0].port).to.eq(55443);\n                    discover.destroy();\n                    return [2 /*return*/];\n            }\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "962b5d75-0197-4426-9dbb-449813692bae",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "962b5d75-0197-4426-9dbb-449813692bae"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 209,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      },
      {
        "uuid": "aaf35b0c-3ffb-475b-9ca7-4a478bd54e7d",
        "title": "Util Test",
        "fullFile": "/home/travis/build/samuraitruong/yeelight/test/util.test.ts",
        "file": "/test/util.test.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "parseDeviceInfo() should successful parse valid message",
            "fullTitle": "Util Test parseDeviceInfo() should successful parse valid message",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var message = fs.readFileSync(path.join(__dirname, \"./data/valid-message.txt\"), \"utf8\");\nvar device = utils_1.Utils.parseDeviceInfo(message);\nvar outputExpected = require(\"./data/valid-device.json\");\nchai_1.expect(device).not.eq(null);\nchai_1.expect(device).deep.eq(outputExpected);",
            "err": {},
            "isRoot": false,
            "uuid": "dc36a00b-560c-4f48-b724-0f5c5bffb0f6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "getListIpAddress should get the arround ip address first",
            "fullTitle": "Util Test getListIpAddress should get the arround ip address first",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var ip = \"192.168.1.5\";\nvar output = utils_1.Utils.getListIpAddress(ip, 1, 10);\nchai_1.expect(output).to.deep.eq([\n    \"192.168.1.4\",\n    \"192.168.1.6\",\n    \"192.168.1.3\",\n    \"192.168.1.7\",\n    \"192.168.1.2\",\n    \"192.168.1.8\",\n    \"192.168.1.1\",\n    \"192.168.1.9\",\n    \"192.168.1.10\",\n]);",
            "err": {},
            "isRoot": false,
            "uuid": "34832b9d-6f63-40b6-8a56-7e526dbeb5ff",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [
          {
            "uuid": "82dca444-22e5-4af9-93f1-c4198a376fc2",
            "title": "hexToNumber() test",
            "fullFile": "/home/travis/build/samuraitruong/yeelight/test/util.test.ts",
            "file": "/test/util.test.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "numberToHex(1) should equal to 1",
                "fullTitle": "Util Test hexToNumber() test numberToHex(1) should equal to 1",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "3b66e9ac-9d24-4d25-a02a-22adf3bcabb0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(10) should equal to 16",
                "fullTitle": "Util Test hexToNumber() test numberToHex(10) should equal to 16",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "e3df1ed1-de33-438c-bc6b-45b0d2b60485",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(14) should equal to 20",
                "fullTitle": "Util Test hexToNumber() test numberToHex(14) should equal to 20",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "5bd01cc9-0860-49e0-9496-566a1fc57b9e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(44) should equal to 68",
                "fullTitle": "Util Test hexToNumber() test numberToHex(44) should equal to 68",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "ec39ec42-6585-4269-8b2d-424793d156dd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(A) should equal to 10",
                "fullTitle": "Util Test hexToNumber() test numberToHex(A) should equal to 10",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "19ba710f-425a-4801-8aeb-c4cd924528c1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(F) should equal to 15",
                "fullTitle": "Util Test hexToNumber() test numberToHex(F) should equal to 15",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "8197d4c6-d109-4ff4-8fda-85c77c5786be",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(1A) should equal to 26",
                "fullTitle": "Util Test hexToNumber() test numberToHex(1A) should equal to 26",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "63129e7c-680b-4989-a121-89102474ad58",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(FF) should equal to 255",
                "fullTitle": "Util Test hexToNumber() test numberToHex(FF) should equal to 255",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "03e01057-9b2e-42cb-8d42-605aa3137bfb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(AB) should equal to 171",
                "fullTitle": "Util Test hexToNumber() test numberToHex(AB) should equal to 171",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "09a9add5-8a45-46f0-a9bd-2ec3d95e4d72",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(A123BE) should equal to 10560446",
                "fullTitle": "Util Test hexToNumber() test numberToHex(A123BE) should equal to 10560446",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "c464637a-446f-4480-a3b2-4f8dba5b3525",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(1234567890ABCDEF) should equal to 1311768467294899700",
                "fullTitle": "Util Test hexToNumber() test numberToHex(1234567890ABCDEF) should equal to 1311768467294899700",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "85c65c0e-ddf5-442c-b1eb-0f4143009d6c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(ABCFED) should equal to 11259885",
                "fullTitle": "Util Test hexToNumber() test numberToHex(ABCFED) should equal to 11259885",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "0e085dd0-4574-4bb9-a9ba-a70e2a734416",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(abccde) should equal to 11259102",
                "fullTitle": "Util Test hexToNumber() test numberToHex(abccde) should equal to 11259102",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "25f7291d-e993-4ba5-8617-43b5a32eba96",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3b66e9ac-9d24-4d25-a02a-22adf3bcabb0",
              "e3df1ed1-de33-438c-bc6b-45b0d2b60485",
              "5bd01cc9-0860-49e0-9496-566a1fc57b9e",
              "ec39ec42-6585-4269-8b2d-424793d156dd",
              "19ba710f-425a-4801-8aeb-c4cd924528c1",
              "8197d4c6-d109-4ff4-8fda-85c77c5786be",
              "63129e7c-680b-4989-a121-89102474ad58",
              "03e01057-9b2e-42cb-8d42-605aa3137bfb",
              "09a9add5-8a45-46f0-a9bd-2ec3d95e4d72",
              "c464637a-446f-4480-a3b2-4f8dba5b3525",
              "85c65c0e-ddf5-442c-b1eb-0f4143009d6c",
              "0e085dd0-4574-4bb9-a9ba-a70e2a734416",
              "25f7291d-e993-4ba5-8617-43b5a32eba96"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [
          "dc36a00b-560c-4f48-b724-0f5c5bffb0f6",
          "34832b9d-6f63-40b6-8a56-7e526dbeb5ff"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      },
      {
        "uuid": "64cceb40-3625-4ba0-8e3c-fd318a5f2db4",
        "title": "Yeelight Class Test",
        "fullFile": "/home/travis/build/samuraitruong/yeelight/test/yeelight.test.ts",
        "file": "/test/yeelight.test.ts",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Yeelight Class Test \"before each\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var me = TestUtils;\nserver = net_1.createServer(function (s) {\n    socket = s;\n    socket.on(\"data\", function (incomming) {\n        validateFunc(JSON.parse(incomming.toString()));\n        if (data) {\n            socket.write(JSON.stringify(data));\n        }\n    });\n    // socket.pipe(socket);\n});\nserver.on(\"connection\", function (s) { return socket = s; });\n// console.log(\"this.port\", me.port);\nserver.listen(me.port, \"127.0.0.1\", done);\n//done();",
            "err": {},
            "isRoot": false,
            "uuid": "2cbda6e5-6880-4ec7-937d-17db30c34c4f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "Yeelight Class Test \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "// TestUtils.port++;\nif (socket) {\n    socket.removeAllListeners();\n    socket.end();\n    socket.destroy();\n}\nif (server) {\n    server.removeAllListeners();\n    server.close(done);\n}\nelse {\n    done();\n}",
            "err": {},
            "isRoot": false,
            "uuid": "87f7e27e-082d-4c9e-bc97-4b9221563107",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "connect() should success",
            "fullTitle": "Yeelight Class Test connect() should success",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return __awaiter(_this, void 0, void 0, function () {\n        var yeelight, y;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    yeelight = new yeelight_1.Yeelight(options);\n                    return [4 /*yield*/, yeelight.connect()];\n                case 1:\n                    y = _a.sent();\n                    chai_1.expect(y).not.eq(null);\n                    chai_1.expect(y.connected).to.eq(true);\n                    y.disconnect();\n                    return [2 /*return*/];\n            }\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "64d54ec2-907c-498b-b9d6-2914d88db99a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [
          {
            "uuid": "e3b111b3-672e-481a-a230-f48257885edc",
            "title": "setName() tests",
            "fullFile": "/home/travis/build/samuraitruong/yeelight/test/yeelight.test.ts",
            "file": "/test/yeelight.test.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "setName() should work when send valid message",
                "fullTitle": "Yeelight Class Test setName() tests setName() should work when send valid message",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options.lightPort = test_util_1.TestUtils.port;\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        test_util_1.TestUtils.mockSocket({ id: 1, result: [\"ok\"] }, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"unit_test\"],\n                            });\n                        });\n                        return [4 /*yield*/, y.setName(\"unit_test\")];\n                    case 2:\n                        result = _a.sent();\n                        chai_1.expect(result).to.not.eq(null);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "150cd59a-63f5-444c-8c79-269d04eb7568",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "setName() should fire commandSuccess, set_name, set_name_sent event",
                "fullTitle": "Yeelight Class Test setName() tests setName() should fire commandSuccess, set_name, set_name_sent event",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, expectData, spy1, spy2, spy3, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        options.lightPort = test_util_1.TestUtils.port;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        expectData = {\n                            action: \"set_name\",\n                            command: new models_1.Command(1, models_1.CommandType.SET_NAME, [\"unit_test\"]),\n                            result: { id: 1, result: [\"ok\"] },\n                            success: true,\n                        };\n                        spy1 = sinon_1.spy();\n                        spy2 = sinon_1.spy();\n                        spy3 = sinon_1.spy();\n                        y.once(\"set_name\", spy1);\n                        y.once(\"commandSuccess\", spy2);\n                        y.once(\"set_name_sent\", spy3);\n                        test_util_1.TestUtils.mockSocket({ id: 1, result: [\"ok\"] }, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"unit_test\"],\n                            });\n                        });\n                        return [4 /*yield*/, y.setName(\"unit_test\")];\n                    case 2:\n                        result = _a.sent();\n                        chai_1.expect(__assign({}, result)).to.deep.equal(expectData);\n                        sinon_1.assert.calledWith(spy1, expectData);\n                        sinon_1.assert.calledWith(spy2, expectData);\n                        sinon_1.assert.calledWith(spy3, expectData.command);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "e58a73f5-aac7-4110-8945-785f69d14ab9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "setName() should fire error when send invalid name, should fire set_name, commandError, set_name_sent events",
                "fullTitle": "Yeelight Class Test setName() tests setName() should fire error when send invalid name, should fire set_name, commandError, set_name_sent events",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, expectData1, spy1, spy2, spy3, result, errResult, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        options.lightPort = test_util_1.TestUtils.port;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        expectData1 = {\n                            action: \"set_name\",\n                            command: new models_1.Command(1, models_1.CommandType.SET_NAME, [\"this is invalid name\"]),\n                            result: { id: 1, error: { code: -1, message: \"General error\" } },\n                            success: false,\n                        };\n                        spy1 = sinon_1.spy();\n                        spy2 = sinon_1.spy();\n                        spy3 = sinon_1.spy();\n                        y.once(\"set_name\", spy1);\n                        y.once(\"commandError\", spy2);\n                        y.once(\"set_name_sent\", spy3);\n                        test_util_1.TestUtils.mockSocket({ id: 1, error: { code: -1, message: \"General error\" } }, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"this is invalid name\"],\n                            });\n                        });\n                        result = null;\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, y.setName(\"this is invalid name\")];\n                    case 3:\n                        result = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_1 = _a.sent();\n                        errResult = error_1;\n                        return [3 /*break*/, 5];\n                    case 5:\n                        chai_1.expect(result).to.be.equal(null);\n                        chai_1.expect(__assign({}, errResult)).to.deep.equal(expectData1);\n                        sinon_1.assert.calledWith(spy1, expectData1);\n                        sinon_1.assert.calledWith(spy2, expectData1);\n                        sinon_1.assert.calledWith(spy3, expectData1.command);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "32cfbb96-3bbf-4bd5-a8a4-f87953823418",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "setName() should reject promise, raise commandTimedout event when socket not response",
                "fullTitle": "Yeelight Class Test setName() tests setName() should reject promise, raise commandTimedout event when socket not response",
                "timedOut": false,
                "duration": 2001,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, expectData, spy2, spy3, result, err_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        options.lightPort = test_util_1.TestUtils.port;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        expectData = {\n                            action: \"set_name\",\n                            command: new models_1.Command(1, models_1.CommandType.SET_NAME, [\"mybulb\"]),\n                            success: false,\n                        };\n                        spy2 = sinon_1.spy();\n                        spy3 = sinon_1.spy();\n                        y.once(\"commandTimedout\", spy2);\n                        y.once(\"set_name_sent\", spy3);\n                        test_util_1.TestUtils.mockSocket(null, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"mybulb\"],\n                            });\n                        });\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, y.setName(\"mybulb\")];\n                    case 3:\n                        result = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_1 = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 5:\n                        sinon_1.assert.calledWith(spy2, expectData.command);\n                        sinon_1.assert.calledWith(spy3, expectData.command);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "cfcb933e-735c-43f7-9959-532de4ddb524",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "150cd59a-63f5-444c-8c79-269d04eb7568",
              "e58a73f5-aac7-4110-8945-785f69d14ab9",
              "32cfbb96-3bbf-4bd5-a8a4-f87953823418",
              "cfcb933e-735c-43f7-9959-532de4ddb524"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2012,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "b9ea28d9-0c7b-4a04-8744-4a3eb87e5074",
            "title": "manipulator methods",
            "fullFile": "/home/travis/build/samuraitruong/yeelight/test/yeelight.test.ts",
            "file": "/test/yeelight.test.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "method toggle should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method toggle should work when send valid message",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "16349df3-9522-4ca3-9a4b-5615746db5fa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method cronAdd should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method cronAdd should work when send valid message",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "37490923-e136-49c5-9feb-07c179097304",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method cronGet should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method cronGet should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "f0bedb7c-c542-4946-aec3-f6063e4aa87a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method cronDelete should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method cronDelete should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "dea01e6a-9ab9-476f-a2fd-959f97190a4f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setDefault should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setDefault should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "700b0b82-7ee0-4502-beb5-a683ccab5388",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method startColorFlow should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method startColorFlow should work when send valid message",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "04f3e353-5630-4de7-89c4-5ea0d561495c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method stopColorFlow should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method stopColorFlow should work when send valid message",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "d57be7cc-7249-49e2-8495-f98f734974ac",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method getProperty should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method getProperty should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "6ab4c43e-ba54-4293-b081-0116affb9940",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setCtAbx should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setCtAbx should work when send valid message",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "53c40b12-1751-4f10-9c6a-3db15bca709e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setRGB should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setRGB should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "f2d758b0-46c7-4c07-8fb6-4119cf1a5807",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setHSV should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setHSV should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "c39b28e8-add5-4d02-9a12-c2f6f08dc386",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setBright should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setBright should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "49e6cf4f-3c3a-4fc5-86d1-e6f41a445bc1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setAdjust should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setAdjust should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "da4700ea-c1ce-4da4-84a8-9db88749c44a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setName should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setName should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "a18f71e1-627b-4dc5-b9ea-5cf201510876",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method adjust should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method adjust should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "c460c6d3-c365-4290-a726-8764b32b330d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method ping should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method ping should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "9a20c53d-0406-4bb2-92aa-a1e9cc8e824a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setScene should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setScene should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "8e46de7d-5b10-4341-b2b5-70ac807a4bd8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "16349df3-9522-4ca3-9a4b-5615746db5fa",
              "37490923-e136-49c5-9feb-07c179097304",
              "f0bedb7c-c542-4946-aec3-f6063e4aa87a",
              "dea01e6a-9ab9-476f-a2fd-959f97190a4f",
              "700b0b82-7ee0-4502-beb5-a683ccab5388",
              "04f3e353-5630-4de7-89c4-5ea0d561495c",
              "d57be7cc-7249-49e2-8495-f98f734974ac",
              "6ab4c43e-ba54-4293-b081-0116affb9940",
              "53c40b12-1751-4f10-9c6a-3db15bca709e",
              "f2d758b0-46c7-4c07-8fb6-4119cf1a5807",
              "c39b28e8-add5-4d02-9a12-c2f6f08dc386",
              "49e6cf4f-3c3a-4fc5-86d1-e6f41a445bc1",
              "da4700ea-c1ce-4da4-84a8-9db88749c44a",
              "a18f71e1-627b-4dc5-b9ea-5cf201510876",
              "c460c6d3-c365-4290-a726-8764b32b330d",
              "9a20c53d-0406-4bb2-92aa-a1e9cc8e824a",
              "8e46de7d-5b10-4341-b2b5-70ac807a4bd8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 22,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [
          "64d54ec2-907c-498b-b9d6-2914d88db99a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 6,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 10000
  },
  "copyrightYear": 2021
}